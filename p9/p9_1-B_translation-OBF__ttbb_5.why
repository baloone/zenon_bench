(*
Copyright 2012-2015 Consortium of the BWare ANR Project (ANR-12-INSE-0010)
	  	    <http://bware.lri.fr/>
Copyright 2012-2015 Cedric (CPR Team)
	  	    David DELAHAYE
	  	    <david.delahaye@cnam.fr>
Copyright 2012-2015 LRI (VALS team)
	  	    Sylvain CONCHON
	  	    <sylvain.conchon@lri.fr>
Copyright 2012-2015 Inria (Gallium, Deducteam)
	  	    Damien DOLIGEZ
	  	    <damien.doligez@inria.fr>
Copyright 2012-2015 Mitsubishi Electric R&D Centre Europe
	  	    David MENTRE
	  	    <d.mentre@fr.merce.mee.com>
Copyright 2012-2015 ClearSy
	  	    Thierry LECOMTE
	  	    <thierry.lecomte@clearsy.com>
Copyright 2012-2015 OCamlPro
	  	    Fabrice LE FESSANT
		    <fabrice.le_fessant@ocamlpro.com>

This file is a free software.

This software is governed by the CeCILL-B license under French law and 
abiding by the rules of distribution of free software.  
You can use, modify and/or redistribute the software under the terms of the 
CeCILL-B license as circulated by CEA, CNRS and INRIA at the following URL 
"http://www.cecill.info". 

As a counterpart to the access to the source code and rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty and the software's author, the holder of the
economic rights, and the successive licensors have only limited liability. 

In this respect, the user's attention is drawn to the risks associated
with loading, using, modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean that it is complicated to manipulate, and that also
therefore means that it is reserved for developers and experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and, more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

--------------------------------------------------------------------------------
*)
logic safe_comp_div: int, int -> int
axiom safe_comp_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_div(x,y) = x / y
logic safe_comp_mod: int, int -> int
axiom safe_comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs : int -> int

axiom abs_def38 : (forall x:int. ((0 <= x) -> (abs(x) = x)))

axiom abs_def39 : (forall x:int. ((not (0 <= x)) -> (abs(x) = (-x))))

axiom Abs_le57 : (forall x:int. forall y:int. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le58 : (forall x:int. forall y:int. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le59 :
  (forall x:int. forall y:int. ((((-y) <= x) and (x <= y)) -> (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_comp_div(x,y)) + safe_comp_mod(x,y)))))

axiom Div_bound38 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_bound39 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_comp_div(x,y) <= x)))

axiom Mod_bound38 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs(y)) <  safe_comp_mod(x,y))))

axiom Mod_bound39 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_comp_mod(x,y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (safe_comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= safe_comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (safe_comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((safe_comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (safe_comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (safe_comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_div(((x * y) + z),x) = (y + safe_comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_mod(((x * y) + z),x) = safe_comp_mod(z,x))))

type 'a set

logic mem : 'a, 'a set -> prop

predicate infix_eqeq(s1: 'a set, s2: 'a set) =
  (forall x:'a. (mem(x, s1) <-> mem(x, s2)))

axiom extensionality :
  (forall s1:'a set. forall s2:'a set. (infix_eqeq(s1, s2) -> (s1 = s2)))

predicate subset(s1: 'a set, s2: 'a set) =
  (forall x:'a. (mem(x, s1) -> mem(x, s2)))

axiom subset_refl : (forall s:'a set. subset(s, s))

axiom subset_trans :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set. (subset(s1, s2) ->
  (subset(s2, s3) -> subset(s1, s3))))

logic empty : 'a set

predicate is_empty(s: 'a set) = (forall x:'a. (not mem(x, s)))

axiom empty_def1 : is_empty((empty : 'a set))

axiom mem_empty38 : (forall x:'a. (not mem(x, (empty : 'a set))))

axiom mem_empty39 : true

logic add : 'a, 'a set -> 'a set

axiom add_def138 :
  (forall x:'a. forall y:'a.
  (forall s:'a set. (mem(x, add(y, s)) -> ((x = y) or mem(x, s)))))

axiom add_def139 :
  (forall x:'a. forall y:'a.
  (forall s:'a set. (((x = y) or mem(x, s)) -> mem(x, add(y, s)))))

logic remove : 'a, 'a set -> 'a set

axiom remove_def157 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem(x, remove(y, s)) ->
  (not (x = y))))

axiom remove_def158 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem(x, remove(y, s)) -> mem(x,
  s)))

axiom remove_def159 :
  (forall x:'a. forall y:'a. forall s:'a set. (((not (x = y)) and mem(x,
  s)) -> mem(x, remove(y, s))))

axiom add_remove :
  (forall x:'a. forall s:'a set. (mem(x, s) -> (add(x, remove(x, s)) = s)))

axiom remove_add :
  (forall x:'a. forall s:'a set. (remove(x, add(x, s)) = remove(x, s)))

axiom subset_remove : (forall x:'a. forall s:'a set. subset(remove(x, s), s))

logic union : 'a set, 'a set -> 'a set

axiom union_def138 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, union(s1, s2)) ->
  (mem(x, s1) or mem(x, s2))))

axiom union_def139 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) or mem(x,
  s2)) -> mem(x, union(s1, s2))))

logic inter : 'a set, 'a set -> 'a set

axiom inter_def157 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, inter(s1, s2)) ->
  mem(x, s1)))

axiom inter_def158 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, inter(s1, s2)) ->
  mem(x, s2)))

axiom inter_def159 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) and mem(x,
  s2)) -> mem(x, inter(s1, s2))))

logic diff : 'a set, 'a set -> 'a set

axiom diff_def157 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, diff(s1, s2)) ->
  mem(x, s1)))

axiom diff_def158 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, diff(s1, s2)) ->
  (not mem(x, s2))))

axiom diff_def159 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) and
  (not mem(x, s2))) -> mem(x, diff(s1, s2))))

axiom subset_diff :
  (forall s1:'a set. forall s2:'a set. subset(diff(s1, s2), s1))

logic choose : 'a set -> 'a

axiom choose_def :
  (forall s:'a set. ((not is_empty(s)) -> mem(choose(s), s)))

logic all : 'a set

axiom all_def : (forall x:'a. mem(x, (all : 'a set)))

logic b_bool : bool set

axiom mem_b_bool : (forall x:bool. mem(x, b_bool))

logic integer : int set

axiom mem_integer : (forall x:int. mem(x, integer))

logic natural : int set

axiom mem_natural47 : (forall x:int. (mem(x, natural) -> (0 <= x)))

axiom mem_natural48 : (forall x:int. ((0 <= x) -> mem(x, natural)))

logic natural1 : int set

axiom mem_natural139 : (forall x:int. (mem(x, natural1) -> (0 <  x)))

axiom mem_natural140 : (forall x:int. ((0 <  x) -> mem(x, natural1)))

logic nat : int set

axiom mem_nat66 : (forall x:int. (mem(x, nat) -> (0 <= x)))

axiom mem_nat67 : (forall x:int. (mem(x, nat) -> (x <= 2147483647)))

axiom mem_nat68 :
  (forall x:int. (((0 <= x) and (x <= 2147483647)) -> mem(x, nat)))

logic nat1 : int set

axiom mem_nat158 : (forall x:int. (mem(x, nat1) -> (0 <  x)))

axiom mem_nat159 : (forall x:int. (mem(x, nat1) -> (x <= 2147483647)))

axiom mem_nat160 :
  (forall x:int. (((0 <  x) and (x <= 2147483647)) -> mem(x, nat1)))

logic bounded_int : int set

axiom mem_bounded_int57 :
  (forall x:int. (mem(x, bounded_int) -> ((-2147483647) <= x)))

axiom mem_bounded_int58 :
  (forall x:int. (mem(x, bounded_int) -> (x <= 2147483647)))

axiom mem_bounded_int59 :
  (forall x:int. ((((-2147483647) <= x) and (x <= 2147483647)) -> mem(x,
  bounded_int)))

logic mk : int, int -> int set

axiom mem_interval57 :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))]. (mem(x, mk(a,
  b)) -> (a <= x)))

axiom mem_interval58 :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))]. (mem(x, mk(a,
  b)) -> (x <= b)))

axiom mem_interval59 :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))].
  (((a <= x) and (x <= b)) -> mem(x, mk(a, b))))

axiom interval_empty :
  (forall a:int. forall b:int. ((b <  a) -> (mk(a, b) = (empty : int set))))

axiom interval_add :
  (forall a:int. forall b:int. ((a <= b) -> (mk(a, b) = add(b, mk(a,
  (b - 1))))))

logic power : 'a set -> 'a set set

axiom mem_power38 :
  (forall x:'a set. forall y:'a set [mem(x, power(y))]. (mem(x, power(y)) ->
  subset(x, y)))

axiom mem_power39 :
  (forall x:'a set. forall y:'a set [mem(x, power(y))]. (subset(x, y) ->
  mem(x, power(y))))

logic non_empty_power : 'a set -> 'a set set

axiom mem_non_empty_power57 :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. (mem(x,
  non_empty_power(y)) -> subset(x, y)))

axiom mem_non_empty_power58 :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. (mem(x,
  non_empty_power(y)) -> (not (x = (empty : 'a set)))))

axiom mem_non_empty_power59 :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. ((subset(x,
  y) and (not (x = (empty : 'a set)))) -> mem(x, non_empty_power(y))))

type ('a, 'a1) tuple2 = { Tuple2_proj_1 : 'a; Tuple2_proj_2 : 'a1
}

logic relation : 'a2 set, 'b set -> ('a2, 'b) tuple2 set set

axiom mem_relation57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  relation(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(x, s)))))

axiom mem_relation58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  relation(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(y, t)))))

axiom mem_relation59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   f) -> (mem(x, s) and mem(y, t)))) ->
  mem(f, relation(s, t))))

logic image : ('a, 'b) tuple2 set, 'a set -> 'b set

axiom mem_image38 :
  (forall r:('a, 'b) tuple2 set. forall dom1:'a set. forall y:'b [mem(y,
  image(r, dom1))]. (mem(y, image(r, dom1)) ->
  (exists x:'a. (mem(x, dom1) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, r)))))

axiom mem_image39 :
  (forall r:('a, 'b) tuple2 set. forall dom1:'a set. forall y:'b [mem(y,
  image(r, dom1))].
  ((exists x:'a. (mem(x, dom1) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
   }, r))) ->
  mem(y, image(r, dom1))))

axiom image_union :
  (forall r:('a, 'b) tuple2 set. forall s:'a set. forall t:'a set. (image(r,
  union(s, t)) = union(image(r, s), image(r, t))))

axiom image_add :
  (forall r:('a, 'b) tuple2 set. forall dom1:'a set. forall x:'a. (image(r,
  add(x, dom1)) = union(image(r, add(x, (empty : 'a set))), image(r, dom1))))

logic infix_plmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_function76 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(x, s)))))

axiom mem_function77 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(y, t)))))

axiom mem_function78 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y1:'b. forall y2:'b. ((mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y1 }, f) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y2 },
  f)) -> (y1 = y2)))))

axiom mem_function79 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  (((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
    f) -> (mem(x, s) and mem(y, t)))) and
  (forall x:'a. forall y1:'b. forall y2:'b. ((mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y1 }, f) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y2 },
  f)) -> (y1 = y2)))) -> mem(f, infix_plmngt(s, t))))

axiom domain_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall x:'a. forall y:'b. (mem(f, infix_plmngt(s, t)) -> (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f) -> mem(x, s))))

axiom range_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall x:'a. forall y:'b. (mem(f, infix_plmngt(s, t)) -> (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f) -> mem(y, t))))

axiom function_extend_range :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall u:'b set. (subset(t, u) -> (mem(f, infix_plmngt(s, t)) -> mem(f,
  infix_plmngt(s, u)))))

axiom function_reduce_range :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall u:'b set. (subset(u, t) -> (mem(f, infix_plmngt(s, t)) ->
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   f) -> mem(y, u))) ->
  mem(f, infix_plmngt(s, u))))))

logic inverse : ('a, 'b) tuple2 set -> ('b, 'a) tuple2 set

axiom Inverse_def38 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = x },
  inverse(r)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r))))

axiom Inverse_def39 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = x }, inverse(r)))))

logic dom : ('a, 'b) tuple2 set -> 'a set

axiom dom_def38 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. (mem(x, dom(r)) ->
  (exists y:'b. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom dom_def39 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a.
  ((exists y:'b. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)) -> mem(x,
  dom(r)))))

logic ran : ('a, 'b) tuple2 set -> 'b set

axiom ran_def38 :
  (forall r:('a, 'b) tuple2 set.
  (forall y:'b. (mem(y, ran(r)) ->
  (exists x:'a. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom ran_def39 :
  (forall r:('a, 'b) tuple2 set.
  (forall y:'b.
  ((exists x:'a. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)) -> mem(y,
  ran(r)))))

axiom dom_empty : (dom((empty : ('a, 'b) tuple2 set)) = (empty : 'a set))

axiom dom_add :
  (forall f:('a, 'b) tuple2 set. forall x:'a. forall y:'b. (dom(add({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f)) = add(x, dom(f))))

axiom dom_singleton :
  (forall x:'a. forall y:'b. (dom(add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, (empty : ('a, 'b) tuple2 set))) = add(x, (empty : 'a set))))

logic infix_mnmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_functions57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_total_functions58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngt(s, t)) -> (dom(f) = s)))

axiom mem_total_functions59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and (dom(f) = s)) -> mem(f, infix_mnmngt(s, t))))

axiom total_function_is_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set [mem(f,
  infix_mnmngt(s, t))]. (mem(f, infix_mnmngt(s, t)) -> mem(f, infix_plmngt(s,
  t))))

axiom singleton_is_partial_function :
  (forall s:'a set. forall t:'b set. forall x:'a. forall y:'b. ((mem(x,
  s) and mem(y, t)) -> mem(add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  (empty : ('a, 'b) tuple2 set)), infix_plmngt(s, t))))

axiom singleton_is_function :
  (forall x:'a. forall y:'b [add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  (empty : ('a, 'b) tuple2 set))]. mem(add({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, (empty : ('a, 'b) tuple2 set)), infix_mnmngt(add(x,
  (empty : 'a set)), add(y, (empty : 'b set)))))

logic apply : ('a, 'b) tuple2 set, 'a -> 'b

axiom apply_def0 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. ((mem(f, infix_plmngt(s, t)) and mem(a1, dom(f))) -> mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = apply(f, a1) }, f)))

axiom apply_def1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. ((mem(f, infix_mnmngt(s, t)) and mem(a1, s)) -> mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = apply(f, a1) }, f)))

axiom apply_def2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. forall b1:'b. ((mem(f, infix_plmngt(s, t)) and mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = b1 }, f)) -> (apply(f, a1) = b1)))

axiom apply_singleton :
  (forall x:'a. forall y:'b. (apply(add({ Tuple2_proj_1 = x; Tuple2_proj_2 =
  y }, (empty : ('a, 'b) tuple2 set)), x) = y))

axiom apply_range :
  (forall x:'a. forall f:('a, 'b) tuple2 set. forall s:'a set.
  forall t:'b set [mem(f, infix_plmngt(s, t)), apply(f, x)]. ((mem(f,
  infix_plmngt(s, t)) and mem(x, dom(f))) -> mem(apply(f, x), t)))

logic semicolon : ('a, 'b) tuple2 set, ('b, 'c) tuple2 set -> ('a,
  'c) tuple2 set

axiom semicolon_def38 :
  (forall x:'a. forall z:'c. forall p:('a, 'b) tuple2 set. forall q:('b,
  'c) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = z }, semicolon(p,
  q)) ->
  (exists y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, p) and mem({
  Tuple2_proj_1 = y; Tuple2_proj_2 = z }, q)))))

axiom semicolon_def39 :
  (forall x:'a. forall z:'c. forall p:('a, 'b) tuple2 set. forall q:('b,
  'c) tuple2 set.
  ((exists y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, p) and mem({
   Tuple2_proj_1 = y; Tuple2_proj_2 = z }, q))) ->
  mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = z }, semicolon(p, q))))

logic direct_product : ('a, 'b) tuple2 set, ('a, 'c) tuple2 set -> ('a, ('b,
  'c) tuple2) tuple2 set

axiom direct_product_def38 :
  (forall e:('t, ('u, 'v) tuple2) tuple2. forall r1:('t, 'u) tuple2 set.
  forall r2:('t, 'v) tuple2 set [mem(e, direct_product(r1, r2))]. (mem(e,
  direct_product(r1, r2)) ->
  (exists x:'t. exists y:'u. exists z:'v. (({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = { Tuple2_proj_1 = y; Tuple2_proj_2 = z } } = e) and (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r1) and mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = z }, r2))))))

axiom direct_product_def39 :
  (forall e:('t, ('u, 'v) tuple2) tuple2. forall r1:('t, 'u) tuple2 set.
  forall r2:('t, 'v) tuple2 set [mem(e, direct_product(r1, r2))].
  ((exists x:'t. exists y:'u. exists z:'v. (({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = { Tuple2_proj_1 = y; Tuple2_proj_2 = z } } = e) and (mem({
   Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r1) and mem({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = z }, r2)))) ->
  mem(e, direct_product(r1, r2))))

logic parallel_product : ('a, 'b) tuple2 set, ('c, 'd) tuple2 set -> (('a,
  'c) tuple2, ('b, 'd) tuple2) tuple2 set

axiom parallel_product_def38 :
  (forall e:(('t, 'v) tuple2, ('u, 'w) tuple2) tuple2. forall r1:('t,
  'u) tuple2 set. forall r2:('v, 'w) tuple2 set. (mem(e, parallel_product(r1,
  r2)) ->
  (exists x:'t. exists y:'v. exists z:'u. exists a:'w. (({ Tuple2_proj_1 = {
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }; Tuple2_proj_2 = { Tuple2_proj_1 =
  z; Tuple2_proj_2 = a } } = e) and (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 =
  z }, r1) and mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = a }, r2))))))

axiom parallel_product_def39 :
  (forall e:(('t, 'v) tuple2, ('u, 'w) tuple2) tuple2. forall r1:('t,
  'u) tuple2 set. forall r2:('v, 'w) tuple2 set.
  ((exists x:'t. exists y:'v. exists z:'u. exists a:'w. (({ Tuple2_proj_1 = {
   Tuple2_proj_1 = x; Tuple2_proj_2 = y }; Tuple2_proj_2 = { Tuple2_proj_1 =
   z; Tuple2_proj_2 = a } } = e) and (mem({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = z }, r1) and mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = a },
   r2)))) ->
  mem(e, parallel_product(r1, r2))))

axiom semicolon_dom :
  (forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  subset(dom(semicolon(f, g)), dom(f)))

axiom semicolon_is_function :
  (forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  forall s:'a set. forall t:'b set. forall u:'c set. ((mem(f, infix_plmngt(s,
  t)) and mem(g, infix_plmngt(t, u))) -> mem(semicolon(f, g), infix_plmngt(s,
  u))))

axiom apply_compose :
  (forall x:'a. forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  forall s:'a set. forall t:'b set. forall u:'c set. ((mem(f, infix_plmngt(s,
  t)) and (mem(g, infix_plmngt(t, u)) and (mem(x, dom(f)) and mem(apply(f,
  x), dom(g))))) -> (apply(semicolon(f, g), x) = apply(g, apply(f, x)))))

logic infix_gtplgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_injection57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_partial_injection58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgt(s, t)) -> mem(inverse(f), infix_plmngt(t, s))))

axiom mem_partial_injection59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and mem(inverse(f), infix_plmngt(t, s))) -> mem(f,
  infix_gtplgt(s, t))))

logic infix_gtmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_injection57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_gtplgt(s, t))))

axiom mem_total_injection58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_injection59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtplgt(s, t)) and mem(f, infix_mnmngt(s, t))) -> mem(f,
  infix_gtmngt(s, t))))

axiom mem_total_injection_alt57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_injection_alt58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(inverse(f), infix_plmngt(t, s))))

axiom mem_total_injection_alt59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_mnmngt(s, t)) and mem(inverse(f), infix_plmngt(t, s))) -> mem(f,
  infix_gtmngt(s, t))))

axiom injection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  (forall x:'a. forall y:'a. (mem(f, infix_gtmngt(s, t)) -> (mem(x, s) ->
  (mem(y, s) -> ((apply(f, x) = apply(f, y)) -> (x = y)))))))

logic infix_plmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_surjection57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngtgt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_partial_surjection58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngtgt(s, t)) -> (ran(f) = t)))

axiom mem_partial_surjection59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and (ran(f) = t)) -> mem(f, infix_plmngtgt(s, t))))

logic infix_mnmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_surjection57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngtgt(s, t)) -> mem(f, infix_plmngtgt(s, t))))

axiom mem_total_surjection58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngtgt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_surjection59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngtgt(s, t)) and mem(f, infix_mnmngt(s, t))) -> mem(f,
  infix_mnmngtgt(s, t))))

logic infix_gtplgtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_bijection57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgtgt(s, t)) -> mem(f, infix_gtplgt(s, t))))

axiom mem_partial_bijection58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgtgt(s, t)) -> mem(f, infix_plmngtgt(s, t))))

axiom mem_partial_bijection59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtplgt(s, t)) and mem(f, infix_plmngtgt(s, t))) -> mem(f,
  infix_gtplgtgt(s, t))))

logic infix_gtmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_bijection57 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngtgt(s, t)) -> mem(f, infix_gtmngt(s, t))))

axiom mem_total_bijection58 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngtgt(s, t)) -> mem(f, infix_mnmngtgt(s, t))))

axiom mem_total_bijection59 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtmngt(s, t)) and mem(f, infix_mnmngtgt(s, t))) -> mem(f,
  infix_gtmngtgt(s, t))))

logic id : 'a set -> ('a, 'a) tuple2 set

axiom id_def57 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, id(s)) -> mem(x, s)))

axiom id_def58 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, id(s)) -> (x = y)))

axiom id_def59 :
  (forall x:'a. forall y:'a. forall s:'a set. ((mem(x, s) and (x = y)) ->
  mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, id(s))))

axiom id_dom : (forall s:'a set. (dom(id(s)) = s))

axiom id_ran : (forall s:'a set. (ran(id(s)) = s))

axiom id_fun : (forall s:'a set. mem(id(s), infix_plmngt(s, s)))

axiom id_total_fun : (forall s:'a set. mem(id(s), infix_mnmngt(s, s)))

function seq_length(n: int, s: 'a set) : (int, 'a) tuple2 set set =
  infix_mnmngt(mk(1, n), s)

axiom length_uniq :
  (forall n1:int. forall n2:int. forall s1:'a set. forall s2:'a set.
  forall r:(int, 'a) tuple2 set. (((0 <= n1) and mem(r, seq_length(n1,
  s1))) -> (((0 <= n2) and mem(r, seq_length(n2, s2))) -> (n1 = n2))))

logic size : (int, 'a) tuple2 set -> int

axiom size_def :
  (forall n:int. forall s:'a set. forall r:(int, 'a) tuple2 set.
  (((0 <= n) and mem(r, seq_length(n, s))) -> (size(r) = n)))

logic seq : 'a set -> (int, 'a) tuple2 set set

axiom seq_def57 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) ->
  (0 <= size(r))))

axiom seq_def58 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) -> mem(r,
  seq_length(size(r), s))))

axiom seq_def59 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (((0 <= size(r)) and
  mem(r, seq_length(size(r), s))) -> mem(r, seq(s))))

axiom seq_as_total_function :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) -> mem(r,
  infix_mnmngt(mk(1, size(r)), s))))

logic seq1 : 'a set -> (int, 'a) tuple2 set set

logic iseq : 'a set -> (int, 'a) tuple2 set set

logic iseq1 : 'a set -> (int, 'a) tuple2 set set

logic perm : 'a set -> (int, 'a) tuple2 set set

logic is_finite_subset : 'a set, 'a set, int -> prop

axiom Empty : (forall s:'a set. is_finite_subset((empty : 'a set), s, 0))

axiom Add_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set. forall c:int.
  (is_finite_subset(s1, s2, c) -> (mem(x, s2) -> (mem(x, s1) ->
  is_finite_subset(add(x, s1), s2, c)))))

axiom Add_notmem :
  (forall x:'a. forall s1:'a set. forall s2:'a set. forall c:int.
  (is_finite_subset(s1, s2, c) -> (mem(x, s2) -> ((not mem(x, s1)) ->
  is_finite_subset(add(x, s1), s2, (c + 1))))))

axiom is_finite_subset_inversion :
  (forall z:'a set. forall z1:'a set. forall z2:int. (is_finite_subset(z, z1,
  z2) ->
  (((exists s:'a set. (((z = (empty : 'a set)) and (z1 = s)) and (z2 = 0))) or
  (exists x:'a. exists s1:'a set. exists s2:'a set. exists c:int.
  (is_finite_subset(s1, s2, c) and (mem(x, s2) and (mem(x, s1) and
  (((z = add(x, s1)) and (z1 = s2)) and (z2 = c))))))) or
  (exists x:'a. exists s1:'a set. exists s2:'a set. exists c:int.
  (is_finite_subset(s1, s2, c) and (mem(x, s2) and ((not mem(x, s1)) and
  (((z = add(x, s1)) and (z1 = s2)) and (z2 = (c + 1))))))))))

axiom finite_interval :
  (forall a:int. forall b:int. ((a <= b) -> is_finite_subset(mk(a, b),
  integer, ((b - a) + 1))))

axiom finite_interval_empty :
  (forall a:int. forall b:int. ((b <  a) -> is_finite_subset(mk(a, b),
  integer, 0)))

logic finite_subsets : 'a set -> 'a set set

axiom finite_subsets_def38 :
  (forall s:'a set. forall x:'a set. (mem(x, finite_subsets(s)) ->
  (exists c:int. is_finite_subset(x, s, c))))

axiom finite_subsets_def39 :
  (forall s:'a set. forall x:'a set.
  ((exists c:int. is_finite_subset(x, s, c)) -> mem(x, finite_subsets(s))))

axiom finite_Empty :
  (forall s:'a set. mem((empty : 'a set), finite_subsets(s)))

axiom finite_Add :
  (forall x:'a. forall s1:'a set. forall s2:'a set. (mem(s1,
  finite_subsets(s2)) -> (mem(x, s2) -> mem(add(x, s1),
  finite_subsets(s2)))))

axiom finite_Union :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set. (mem(s1,
  finite_subsets(s3)) -> (mem(s2, finite_subsets(s3)) -> mem(union(s1, s2),
  finite_subsets(s3)))))

axiom finite_inversion :
  (forall s1:'a set. forall s2:'a set. (mem(s1, finite_subsets(s2)) ->
  ((s1 = (empty : 'a set)) or
  (exists x:'a. exists s3:'a set. ((s1 = add(x, s3)) and mem(s3,
  finite_subsets(s2)))))))

logic non_empty_finite_subsets : 'a set -> 'a set set

axiom non_empty_finite_subsets_def38 :
  (forall s:'a set. forall x:'a set. (mem(x, non_empty_finite_subsets(s)) ->
  (exists c:int. (is_finite_subset(x, s, c) and
  (not (x = (empty : 'a set)))))))

axiom non_empty_finite_subsets_def39 :
  (forall s:'a set. forall x:'a set.
  ((exists c:int. (is_finite_subset(x, s, c) and
   (not (x = (empty : 'a set))))) ->
  mem(x, non_empty_finite_subsets(s))))

axiom card_non_neg :
  (forall s:'a set. forall x:'a set. forall c:int. (is_finite_subset(x, s,
  c) -> (0 <= c)))

axiom card_unique :
  (forall s:'a set. forall x:'a set. forall c1:int. forall c2:int.
  (is_finite_subset(x, s, c1) -> (is_finite_subset(x, s, c2) -> (c1 = c2))))

logic card : 'a set -> int

axiom card_def :
  (forall s:'a set. forall x:'a set. forall c:int. (is_finite_subset(x, s,
  c) -> (card(x) = c)))

axiom card_Empty : (card((empty : 'a set)) = 0)

axiom card_Add_not_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set [mem(s1,
  finite_subsets(s2)), card(add(x, s1))]. (mem(s1, finite_subsets(s2)) ->
  ((not mem(x, s1)) -> (card(add(x, s1)) = (card(s1) + 1)))))

axiom card_Add_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set [mem(s1,
  finite_subsets(s2)), card(add(x, s1))]. (mem(s1, finite_subsets(s2)) ->
  (mem(x, s1) -> (card(add(x, s1)) = card(s1)))))

axiom card_Union :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set [mem(s1,
  finite_subsets(s3)), mem(s2, finite_subsets(s3)), card(union(s1, s2))].
  (mem(s1, finite_subsets(s3)) -> (mem(s2, finite_subsets(s3)) ->
  (is_empty(inter(s1, s2)) -> (card(union(s1,
  s2)) = (card(s1) + card(s2)))))))

logic times : 'a set, 'b set -> ('a, 'b) tuple2 set

axiom times_def57 :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b)) -> mem(x, a)))

axiom times_def58 :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b)) -> mem(y, b)))

axiom times_def59 :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. ((mem(x, a) and
  mem(y, b)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))))

function relations(u: 'a set, v: 'b set) : ('a, 'b) tuple2 set set =
  power(times(u, v))

axiom break_mem_in_add38 :
  (forall c:('a, 'b) tuple2. forall s:('a, 'b) tuple2 set. forall x:'a.
  forall y:'b. (mem(c, add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, s)) ->
  ((c = { Tuple2_proj_1 = x; Tuple2_proj_2 = y }) or mem(c, s))))

axiom break_mem_in_add39 :
  (forall c:('a, 'b) tuple2. forall s:('a, 'b) tuple2 set. forall x:'a.
  forall y:'b. (((c = { Tuple2_proj_1 = x; Tuple2_proj_2 = y }) or mem(c,
  s)) -> mem(c, add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, s))))

axiom break_power_times38 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (mem(r,
  power(times(u, v))) -> subset(r, times(u, v))))

axiom break_power_times39 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) -> mem(r, power(times(u, v)))))

axiom subset_of_times57 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem(x, u)))))

axiom subset_of_times58 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem(y, v)))))

axiom subset_of_times59 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set.
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   r) -> (mem(x, u) and mem(y, v)))) ->
  subset(r, times(u, v))))

axiom apply_times :
  (forall s:'a set. forall x:'a. forall y:'b [apply(times(s, add(y,
  (empty : 'b set))), x)]. (mem(x, s) -> (apply(times(s, add(y,
  (empty : 'b set))), x) = y)))

logic range_restriction : ('a, 'b) tuple2 set, 'b set -> ('a, 'b) tuple2 set

axiom range_restriction_def57 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e2 set. (subset(f, ran(r)) -> (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, range_restriction(r, f)) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r))))

axiom range_restriction_def58 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e2 set. (subset(f, ran(r)) -> (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, range_restriction(r, f)) -> mem(y, f))))

axiom range_restriction_def59 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e2 set. (subset(f, ran(r)) -> ((mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r) and mem(y, f)) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, range_restriction(r, f)))))

logic range_substraction : ('a, 'b) tuple2 set, 'b set -> ('a, 'b) tuple2 set

axiom range_substraction_def57 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  range_substraction(r, f)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r)))

axiom range_substraction_def58 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  range_substraction(r, f)) -> (not mem(y, f))))

axiom range_substraction_def59 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e2 set. ((mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r) and
  (not mem(y, f))) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  range_substraction(r, f))))

logic domain_restriction : 'a set, ('a, 'b) tuple2 set -> ('a, 'b) tuple2 set

axiom domain_restriction_def57 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e1 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  domain_restriction(f, r)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r)))

axiom domain_restriction_def58 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e1 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  domain_restriction(f, r)) -> mem(x, f)))

axiom domain_restriction_def59 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e1 set. ((mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r) and
  mem(x, f)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  domain_restriction(f, r))))

logic domain_substraction : 'a set, ('a, 'b) tuple2 set -> ('a,
  'b) tuple2 set

axiom domain_substraction_def57 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e1 set. (subset(f, dom(r)) -> (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, domain_substraction(f, r)) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r))))

axiom domain_substraction_def58 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e1 set. (subset(f, dom(r)) -> (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, domain_substraction(f, r)) -> (not mem(x, f)))))

axiom domain_substraction_def59 :
  (forall x:'e1. forall y:'e2. forall r:('e1, 'e2) tuple2 set.
  forall f:'e1 set. (subset(f, dom(r)) -> ((mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r) and (not mem(x, f))) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, domain_substraction(f, r)))))

logic infix_lspl : ('a, 'b) tuple2 set, ('a, 'b) tuple2 set -> ('a,
  'b) tuple2 set

axiom overriding_def57 :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lspl(q, r)) -> (mem(x, dom(r)) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r))))

axiom overriding_def58 :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lspl(q, r)) -> ((not mem(x, dom(r))) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, q))))

axiom overriding_def59 :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (((mem(x, dom(r)) and mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r)) or ((not mem(x, dom(r))) and mem({ Tuple2_proj_1 =
  x; Tuple2_proj_2 = y }, q))) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, infix_lspl(q, r))))

axiom function_overriding :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. ((mem(f, infix_plmngt(s, t)) and mem(g,
  infix_plmngt(s, t))) -> mem(infix_lspl(f, g), infix_plmngt(s, t))))

axiom dom_overriding :
  (forall f:('a, 'b) tuple2 set. forall g:('a, 'b) tuple2 set
  [dom(infix_lspl(f, g))]. (dom(infix_lspl(f, g)) = union(dom(f), dom(g))))

axiom apply_overriding_1 :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. forall x:'a [mem(f, infix_plmngt(s, t)),
  mem(g, infix_plmngt(s, t)), apply(infix_lspl(f, g), x)]. ((mem(f,
  infix_plmngt(s, t)) and mem(g, infix_plmngt(s, t))) -> (mem(x, dom(g)) ->
  (apply(infix_lspl(f, g), x) = apply(g, x)))))

axiom apply_overriding_2 :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. forall x:'a [mem(f, infix_plmngt(s, t)),
  apply(infix_lspl(f, g), x)| mem(g, infix_plmngt(s, t)), apply(infix_lspl(f,
  g), x)]. ((mem(f, infix_plmngt(s, t)) and mem(g, infix_plmngt(s, t))) ->
  ((not mem(x, dom(g))) -> (mem(x, dom(f)) -> (apply(infix_lspl(f, g),
  x) = apply(f, x))))))

type uninterpreted_type

predicate f1(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) =
  ((((((((((((((((((((((((((((((((((((((((((((((((((mem(v_OBF__iibb,
  power(times(v_OBF__oo, v_OBF__pp))) and mem(v_OBF__jjbb,
  power(times(times(v_OBF__oo, v_OBF__pp), v_OBF__ee)))) and mem(v_OBF__kkbb,
  power(times(v_OBF__oo, v_OBF__pp)))) and mem(v_OBF__llbb,
  power(times(v_OBF__oo, v_OBF__pp)))) and mem(v_OBF__mmbb,
  power(times(v_OBF__oo, v_OBF__pp)))) and infix_eqeq(v_OBF__nnbb,
  union(union(union(union(union(times(times(v_OBF__iibb, v_OBF__ee),
  add(v_OBF__ff, (empty : int set))), times(v_OBF__jjbb, add(v_OBF__hh,
  (empty : int set)))), times(times(v_OBF__kkbb, v_OBF__ee), add(v_OBF__jj,
  (empty : int set)))), times(times(v_OBF__llbb, v_OBF__ee), add(v_OBF__ll,
  (empty : int set)))), times(times(v_OBF__mmbb, v_OBF__ee), add(v_OBF__nn,
  (empty : int set)))), times(times(times(v_OBF__oo, v_OBF__pp), v_OBF__ee),
  add(v_OBF__bb, (empty : int set)))))) and mem(v_OBF__nnbb,
  power(times(times(times(v_OBF__oo, v_OBF__pp), v_OBF__ee),
  v_OBF__qq)))) and mem(v_OBF__ff, v_OBF__qq)) and mem(v_OBF__hh,
  v_OBF__qq)) and mem(v_OBF__jj, v_OBF__qq)) and mem(v_OBF__ll,
  v_OBF__qq)) and mem(v_OBF__nn, v_OBF__qq)) and mem(v_OBF__bb,
  v_OBF__qq)) and (not (v_OBF__ff = v_OBF__hh))) and
  (not (v_OBF__ff = v_OBF__jj))) and (not (v_OBF__ff = v_OBF__ll))) and
  (not (v_OBF__ff = v_OBF__nn))) and (not (v_OBF__ff = v_OBF__bb))) and
  (not (v_OBF__hh = v_OBF__ff))) and (not (v_OBF__hh = v_OBF__jj))) and
  (not (v_OBF__hh = v_OBF__ll))) and (not (v_OBF__hh = v_OBF__nn))) and
  (not (v_OBF__hh = v_OBF__bb))) and (not (v_OBF__jj = v_OBF__ff))) and
  (not (v_OBF__jj = v_OBF__hh))) and (not (v_OBF__jj = v_OBF__ll))) and
  (not (v_OBF__jj = v_OBF__nn))) and (not (v_OBF__jj = v_OBF__bb))) and
  (not (v_OBF__ll = v_OBF__ff))) and (not (v_OBF__ll = v_OBF__hh))) and
  (not (v_OBF__ll = v_OBF__jj))) and (not (v_OBF__ll = v_OBF__nn))) and
  (not (v_OBF__ll = v_OBF__bb))) and (not (v_OBF__nn = v_OBF__ff))) and
  (not (v_OBF__nn = v_OBF__hh))) and (not (v_OBF__nn = v_OBF__jj))) and
  (not (v_OBF__nn = v_OBF__ll))) and (not (v_OBF__nn = v_OBF__bb))) and
  (not (v_OBF__bb = v_OBF__ff))) and (not (v_OBF__bb = v_OBF__hh))) and
  (not (v_OBF__bb = v_OBF__jj))) and (not (v_OBF__bb = v_OBF__ll))) and
  (not (v_OBF__bb = v_OBF__nn))) and mem(v_OBF__oo,
  finite_subsets(integer))) and (not infix_eqeq(v_OBF__oo,
  (empty : int set)))) and mem(v_OBF__pp, finite_subsets(integer))) and
  (not infix_eqeq(v_OBF__pp, (empty : int set)))) and mem(v_OBF__ee,
  finite_subsets(integer))) and (not infix_eqeq(v_OBF__ee,
  (empty : int set)))) and mem(v_OBF__qq, finite_subsets(integer))) and
  (not infix_eqeq(v_OBF__qq, (empty : int set))))

predicate f2(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) =
  (((((((((((((((((mem(v_OBF__cc, integer) and mem(v_OBF__rr, v_OBF__oo)) and
  mem(v_OBF__ss, v_OBF__pp)) and mem(v_OBF__zz, v_OBF__ee)) and
  mem(v_OBF__aa, v_OBF__qq)) and mem(v_OBF__aabb,
  power(times(times(times(v_OBF__oo, v_OBF__pp), v_OBF__ee),
  v_OBF__qq)))) and mem(v_OBF__dd, power(times(v_OBF__oo, v_OBF__pp)))) and
  mem(v_OBF__gg, power(times(times(v_OBF__oo, v_OBF__pp), v_OBF__ee)))) and
  mem(v_OBF__xx, power(times(v_OBF__oo, v_OBF__pp)))) and mem(v_OBF__vv,
  power(times(v_OBF__oo, v_OBF__pp)))) and mem(v_OBF__tt,
  power(times(v_OBF__oo, v_OBF__pp)))) and infix_eqeq(v_OBF__aabb,
  union(union(union(union(union(times(times(v_OBF__dd, v_OBF__ee),
  add(v_OBF__ff, (empty : int set))), times(v_OBF__gg, add(v_OBF__hh,
  (empty : int set)))), times(times(v_OBF__xx, v_OBF__ee), add(v_OBF__jj,
  (empty : int set)))), times(times(v_OBF__vv, v_OBF__ee), add(v_OBF__ll,
  (empty : int set)))), times(times(v_OBF__tt, v_OBF__ee), add(v_OBF__nn,
  (empty : int set)))), times(times(times(v_OBF__oo, v_OBF__pp), v_OBF__ee),
  add(v_OBF__bb, (empty : int set)))))) and (v_OBF__ccbb = v_OBF__cc)) and
  (v_OBF__ddbb = v_OBF__rr)) and (v_OBF__eebb = v_OBF__ss)) and
  (v_OBF__ffbb = v_OBF__zz)) and (v_OBF__ggbb = v_OBF__aa)) and
  (v_OBF__hhbb = v_OBF__bbbb))

predicate f3(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) =
  ((((((((v_OBF__aa = v_OBF__ff) -> (not mem({ Tuple2_proj_1 = v_OBF__rr;
  Tuple2_proj_2 = v_OBF__ss }, v_OBF__dd))) and ((v_OBF__aa = v_OBF__hh) ->
  (not mem({ Tuple2_proj_1 = { Tuple2_proj_1 = v_OBF__rr; Tuple2_proj_2 =
  v_OBF__ss }; Tuple2_proj_2 = v_OBF__zz }, v_OBF__gg)))) and
  ((v_OBF__aa = v_OBF__jj) -> (not mem({ Tuple2_proj_1 = v_OBF__rr;
  Tuple2_proj_2 = v_OBF__ss }, v_OBF__xx)))) and ((v_OBF__aa = v_OBF__ll) ->
  (not mem({ Tuple2_proj_1 = v_OBF__rr; Tuple2_proj_2 = v_OBF__ss },
  v_OBF__vv)))) and ((v_OBF__aa = v_OBF__nn) -> (not mem({ Tuple2_proj_1 =
  v_OBF__rr; Tuple2_proj_2 = v_OBF__ss }, v_OBF__tt)))) and
  (not (v_OBF__aa = v_OBF__bb))) and (v_OBF__cc = 2))

predicate f5(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = (not mem({
  Tuple2_proj_1 = { Tuple2_proj_1 = { Tuple2_proj_1 = v_OBF__rr;
  Tuple2_proj_2 = v_OBF__ss }; Tuple2_proj_2 = v_OBF__zz }; Tuple2_proj_2 =
  v_OBF__aa }, v_OBF__aabb))

predicate f6(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = ((mem({
  Tuple2_proj_1 = v_OBF__rr; Tuple2_proj_2 = v_OBF__ss }, v_OBF__dd) and
  (v_OBF__cc = 2)) and (v_OBF__aa = v_OBF__ff))

predicate f7(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = mem({
  Tuple2_proj_1 = { Tuple2_proj_1 = { Tuple2_proj_1 = v_OBF__rr;
  Tuple2_proj_2 = v_OBF__ss }; Tuple2_proj_2 = v_OBF__zz }; Tuple2_proj_2 =
  v_OBF__aa }, v_OBF__aabb)

predicate f9(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = (((((mem({
  Tuple2_proj_1 = { Tuple2_proj_1 = v_OBF__rr; Tuple2_proj_2 = v_OBF__ss };
  Tuple2_proj_2 = v_OBF__zz }, v_OBF__gg) and mem(v_OBF__ww,
  relation(v_OBF__oo, v_OBF__pp))) and mem(v_OBF__yy,
  relation(times(v_OBF__oo, v_OBF__pp), v_OBF__ee))) and mem(v_OBF__ii,
  relation(v_OBF__oo, v_OBF__pp))) and (v_OBF__cc = 2)) and
  (v_OBF__aa = v_OBF__hh))

predicate f12(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = mem(v_OBF__ww,
  power(times(v_OBF__oo, v_OBF__pp)))

predicate f14(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = mem(v_OBF__yy,
  power(times(times(v_OBF__oo, v_OBF__pp), v_OBF__ee)))

predicate f16(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = mem(v_OBF__ii,
  power(times(v_OBF__oo, v_OBF__pp)))

predicate f17(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = (((((((mem({
  Tuple2_proj_1 = v_OBF__rr; Tuple2_proj_2 = v_OBF__ss }, v_OBF__xx) and
  mem(v_OBF__uu, v_OBF__pp)) and mem(v_OBF__ww, relation(v_OBF__oo,
  v_OBF__pp))) and mem(v_OBF__ii, relation(v_OBF__oo, v_OBF__pp))) and
  mem(v_OBF__kk, relation(v_OBF__oo, v_OBF__pp))) and mem(v_OBF__mm,
  relation(v_OBF__oo, v_OBF__pp))) and (v_OBF__cc = 2)) and
  (v_OBF__aa = v_OBF__jj))

predicate f20(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = mem(v_OBF__kk,
  power(times(v_OBF__oo, v_OBF__pp)))

predicate f22(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = mem(v_OBF__mm,
  power(times(v_OBF__oo, v_OBF__pp)))

predicate f23(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = ((((((mem({
  Tuple2_proj_1 = v_OBF__rr; Tuple2_proj_2 = v_OBF__ss }, v_OBF__vv) and
  mem(v_OBF__ww, relation(v_OBF__oo, v_OBF__pp))) and mem(v_OBF__ii,
  relation(v_OBF__oo, v_OBF__pp))) and mem(v_OBF__kk, relation(v_OBF__oo,
  v_OBF__pp))) and mem(v_OBF__mm, relation(v_OBF__oo, v_OBF__pp))) and
  (v_OBF__cc = 2)) and (v_OBF__aa = v_OBF__ll))

predicate f24(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) = ((((((mem({
  Tuple2_proj_1 = v_OBF__rr; Tuple2_proj_2 = v_OBF__ss }, v_OBF__tt) and
  mem(v_OBF__uu, v_OBF__pp)) and mem(v_OBF__ii, relation(v_OBF__oo,
  v_OBF__pp))) and mem(v_OBF__kk, relation(v_OBF__oo, v_OBF__pp))) and
  mem(v_OBF__mm, relation(v_OBF__oo, v_OBF__pp))) and (v_OBF__cc = 2)) and
  (v_OBF__aa = v_OBF__nn))

predicate f26(v_OBF__zz: int, v_OBF__yy: ((int, int) tuple2, int) tuple2 set,
  v_OBF__xx: (int, int) tuple2 set, v_OBF__ww: (int, int) tuple2 set,
  v_OBF__vv: (int, int) tuple2 set, v_OBF__uu: int, v_OBF__tt: (int,
  int) tuple2 set, v_OBF__ss: int, v_OBF__rr: int, v_OBF__qq: int set,
  v_OBF__pp: int set, v_OBF__oo: int set, v_OBF__nnbb: (((int, int) tuple2,
  int) tuple2, int) tuple2 set, v_OBF__nn: int, v_OBF__mmbb: (int,
  int) tuple2 set, v_OBF__mm: (int, int) tuple2 set, v_OBF__llbb: (int,
  int) tuple2 set, v_OBF__ll: int, v_OBF__kkbb: (int, int) tuple2 set,
  v_OBF__kk: (int, int) tuple2 set, v_OBF__jjbb: ((int, int) tuple2,
  int) tuple2 set, v_OBF__jj: int, v_OBF__iibb: (int, int) tuple2 set,
  v_OBF__ii: (int, int) tuple2 set, v_OBF__hhbb: bool, v_OBF__hh: int,
  v_OBF__ggbb: int, v_OBF__gg: ((int, int) tuple2, int) tuple2 set,
  v_OBF__ffbb: int, v_OBF__ff: int, v_OBF__eebb: int, v_OBF__ee: int set,
  v_OBF__ddbb: int, v_OBF__dd: (int, int) tuple2 set, v_OBF__ccbb: int,
  v_OBF__cc: int, v_OBF__bbbb: bool, v_OBF__bb: int, v_OBF__aabb: (((int,
  int) tuple2, int) tuple2, int) tuple2 set, v_OBF__aa: int) =
  ((v_OBF__aa = v_OBF__bb) and (v_OBF__cc = 2))

goal OBF__ttbb_5 :
  (forall v_OBF__zz:int. forall v_OBF__yy:((int, int) tuple2,
  int) tuple2 set. forall v_OBF__xx:(int, int) tuple2 set.
  forall v_OBF__ww:(int, int) tuple2 set. forall v_OBF__vv:(int,
  int) tuple2 set. forall v_OBF__uu:int. forall v_OBF__tt:(int,
  int) tuple2 set. forall v_OBF__ss:int. forall v_OBF__rr:int.
  forall v_OBF__qq:int set. forall v_OBF__pp:int set.
  forall v_OBF__oo:int set. forall v_OBF__nnbb:(((int, int) tuple2,
  int) tuple2, int) tuple2 set. forall v_OBF__nn:int.
  forall v_OBF__mmbb:(int, int) tuple2 set. forall v_OBF__mm:(int,
  int) tuple2 set. forall v_OBF__llbb:(int, int) tuple2 set.
  forall v_OBF__ll:int. forall v_OBF__kkbb:(int, int) tuple2 set.
  forall v_OBF__kk:(int, int) tuple2 set. forall v_OBF__jjbb:((int,
  int) tuple2, int) tuple2 set. forall v_OBF__jj:int.
  forall v_OBF__iibb:(int, int) tuple2 set. forall v_OBF__ii:(int,
  int) tuple2 set. forall v_OBF__hhbb:bool. forall v_OBF__hh:int.
  forall v_OBF__ggbb:int. forall v_OBF__gg:((int, int) tuple2,
  int) tuple2 set. forall v_OBF__ffbb:int. forall v_OBF__ff:int.
  forall v_OBF__eebb:int. forall v_OBF__ee:int set. forall v_OBF__ddbb:int.
  forall v_OBF__dd:(int, int) tuple2 set. forall v_OBF__ccbb:int.
  forall v_OBF__cc:int. forall v_OBF__bbbb:bool. forall v_OBF__bb:int.
  forall v_OBF__aabb:(((int, int) tuple2, int) tuple2, int) tuple2 set.
  forall v_OBF__aa:int. ((f1(v_OBF__zz, v_OBF__yy, v_OBF__xx, v_OBF__ww,
  v_OBF__vv, v_OBF__uu, v_OBF__tt, v_OBF__ss, v_OBF__rr, v_OBF__qq,
  v_OBF__pp, v_OBF__oo, v_OBF__nnbb, v_OBF__nn, v_OBF__mmbb, v_OBF__mm,
  v_OBF__llbb, v_OBF__ll, v_OBF__kkbb, v_OBF__kk, v_OBF__jjbb, v_OBF__jj,
  v_OBF__iibb, v_OBF__ii, v_OBF__hhbb, v_OBF__hh, v_OBF__ggbb, v_OBF__gg,
  v_OBF__ffbb, v_OBF__ff, v_OBF__eebb, v_OBF__ee, v_OBF__ddbb, v_OBF__dd,
  v_OBF__ccbb, v_OBF__cc, v_OBF__bbbb, v_OBF__bb, v_OBF__aabb, v_OBF__aa) and
  (f2(v_OBF__zz, v_OBF__yy, v_OBF__xx, v_OBF__ww, v_OBF__vv, v_OBF__uu,
  v_OBF__tt, v_OBF__ss, v_OBF__rr, v_OBF__qq, v_OBF__pp, v_OBF__oo,
  v_OBF__nnbb, v_OBF__nn, v_OBF__mmbb, v_OBF__mm, v_OBF__llbb, v_OBF__ll,
  v_OBF__kkbb, v_OBF__kk, v_OBF__jjbb, v_OBF__jj, v_OBF__iibb, v_OBF__ii,
  v_OBF__hhbb, v_OBF__hh, v_OBF__ggbb, v_OBF__gg, v_OBF__ffbb, v_OBF__ff,
  v_OBF__eebb, v_OBF__ee, v_OBF__ddbb, v_OBF__dd, v_OBF__ccbb, v_OBF__cc,
  v_OBF__bbbb, v_OBF__bb, v_OBF__aabb, v_OBF__aa) and f24(v_OBF__zz,
  v_OBF__yy, v_OBF__xx, v_OBF__ww, v_OBF__vv, v_OBF__uu, v_OBF__tt,
  v_OBF__ss, v_OBF__rr, v_OBF__qq, v_OBF__pp, v_OBF__oo, v_OBF__nnbb,
  v_OBF__nn, v_OBF__mmbb, v_OBF__mm, v_OBF__llbb, v_OBF__ll, v_OBF__kkbb,
  v_OBF__kk, v_OBF__jjbb, v_OBF__jj, v_OBF__iibb, v_OBF__ii, v_OBF__hhbb,
  v_OBF__hh, v_OBF__ggbb, v_OBF__gg, v_OBF__ffbb, v_OBF__ff, v_OBF__eebb,
  v_OBF__ee, v_OBF__ddbb, v_OBF__dd, v_OBF__ccbb, v_OBF__cc, v_OBF__bbbb,
  v_OBF__bb, v_OBF__aabb, v_OBF__aa))) -> f22(v_OBF__zz, v_OBF__yy,
  v_OBF__xx, v_OBF__ww, v_OBF__vv, v_OBF__uu, v_OBF__tt, v_OBF__ss,
  v_OBF__rr, v_OBF__qq, v_OBF__pp, v_OBF__oo, v_OBF__nnbb, v_OBF__nn,
  v_OBF__mmbb, v_OBF__mm, v_OBF__llbb, v_OBF__ll, v_OBF__kkbb, v_OBF__kk,
  v_OBF__jjbb, v_OBF__jj, v_OBF__iibb, v_OBF__ii, v_OBF__hhbb, v_OBF__hh,
  v_OBF__ggbb, v_OBF__gg, v_OBF__ffbb, v_OBF__ff, v_OBF__eebb, v_OBF__ee,
  v_OBF__ddbb, v_OBF__dd, v_OBF__ccbb, v_OBF__cc, v_OBF__bbbb, v_OBF__bb,
  v_OBF__aabb, v_OBF__aa)))
