(*
Copyright 2012-2015 Consortium of the BWare ANR Project (ANR-12-INSE-0010)
	  	    <http://bware.lri.fr/>
Copyright 2012-2015 Cedric (CPR Team)
	  	    David DELAHAYE
	  	    <david.delahaye@cnam.fr>
Copyright 2012-2015 LRI (VALS team)
	  	    Sylvain CONCHON
	  	    <sylvain.conchon@lri.fr>
Copyright 2012-2015 Inria (Gallium, Deducteam)
	  	    Damien DOLIGEZ
	  	    <damien.doligez@inria.fr>
Copyright 2012-2015 Mitsubishi Electric R&D Centre Europe
	  	    David MENTRE
	  	    <d.mentre@fr.merce.mee.com>
Copyright 2012-2015 ClearSy
	  	    Thierry LECOMTE
	  	    <thierry.lecomte@clearsy.com>
Copyright 2012-2015 OCamlPro
	  	    Fabrice LE FESSANT
		    <fabrice.le_fessant@ocamlpro.com>

This file is a free software.

This software is governed by the CeCILL-B license under French law and 
abiding by the rules of distribution of free software.  
You can use, modify and/or redistribute the software under the terms of the 
CeCILL-B license as circulated by CEA, CNRS and INRIA at the following URL 
"http://www.cecill.info". 

As a counterpart to the access to the source code and rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty and the software's author, the holder of the
economic rights, and the successive licensors have only limited liability. 

In this respect, the user's attention is drawn to the risks associated
with loading, using, modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean that it is complicated to manipulate, and that also
therefore means that it is reserved for developers and experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and, more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.

--------------------------------------------------------------------------------
*)
logic safe_comp_div: int, int -> int
axiom safe_comp_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_div(x,y) = x / y
logic safe_comp_mod: int, int -> int
axiom safe_comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function xorb(x: bool, y: bool) : bool = match_bool(y, match_bool(x, false,
  true), match_bool(x, true, false))

function notb(x: bool) : bool = match_bool(x, false, true)

function implb(x: bool, y: bool) : bool = match_bool(y, true, match_bool(x,
  false, true))

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs : int -> int

axiom abs_def102 : (forall x:int. ((0 <= x) -> (abs(x) = x)))

axiom abs_def103 : (forall x:int. ((not (0 <= x)) -> (abs(x) = (-x))))

axiom Abs_le153 :
  (forall x:int. forall y:int. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le154 : (forall x:int. forall y:int. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le155 :
  (forall x:int. forall y:int. ((((-y) <= x) and (x <= y)) -> (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_comp_div(x,y)) + safe_comp_mod(x,y)))))

axiom Div_bound102 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_bound103 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_comp_div(x,y) <= x)))

axiom Mod_bound102 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs(y)) <  safe_comp_mod(x,y))))

axiom Mod_bound103 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_comp_mod(x,y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (safe_comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= safe_comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (safe_comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((safe_comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (safe_comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (safe_comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_div(((x * y) + z),x) = (y + safe_comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_mod(((x * y) + z),x) = safe_comp_mod(z,x))))

type 'a set

logic mem : 'a, 'a set -> prop

predicate infix_eqeq(s1: 'a set, s2: 'a set) =
  (forall x:'a. (mem(x, s1) <-> mem(x, s2)))

axiom extensionality :
  (forall s1:'a set. forall s2:'a set. (infix_eqeq(s1, s2) -> (s1 = s2)))

predicate subset(s1: 'a set, s2: 'a set) =
  (forall x:'a. (mem(x, s1) -> mem(x, s2)))

axiom subset_refl : (forall s:'a set. subset(s, s))

axiom subset_trans :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set. (subset(s1, s2) ->
  (subset(s2, s3) -> subset(s1, s3))))

logic empty : 'a set

predicate is_empty(s: 'a set) = (forall x:'a. (not mem(x, s)))

axiom empty_def1 : is_empty((empty : 'a set))

axiom mem_empty102 : (forall x:'a. (not mem(x, (empty : 'a set))))

axiom mem_empty103 : true

logic add : 'a, 'a set -> 'a set

axiom add_def1102 :
  (forall x:'a. forall y:'a.
  (forall s:'a set. (mem(x, add(y, s)) -> ((x = y) or mem(x, s)))))

axiom add_def1103 :
  (forall x:'a. forall y:'a.
  (forall s:'a set. (((x = y) or mem(x, s)) -> mem(x, add(y, s)))))

logic remove : 'a, 'a set -> 'a set

axiom remove_def1153 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem(x, remove(y, s)) ->
  (not (x = y))))

axiom remove_def1154 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem(x, remove(y, s)) -> mem(x,
  s)))

axiom remove_def1155 :
  (forall x:'a. forall y:'a. forall s:'a set. (((not (x = y)) and mem(x,
  s)) -> mem(x, remove(y, s))))

axiom add_remove :
  (forall x:'a. forall s:'a set. (mem(x, s) -> (add(x, remove(x, s)) = s)))

axiom remove_add :
  (forall x:'a. forall s:'a set. (remove(x, add(x, s)) = remove(x, s)))

axiom subset_remove : (forall x:'a. forall s:'a set. subset(remove(x, s), s))

logic union : 'a set, 'a set -> 'a set

axiom union_def1102 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, union(s1, s2)) ->
  (mem(x, s1) or mem(x, s2))))

axiom union_def1103 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) or mem(x,
  s2)) -> mem(x, union(s1, s2))))

logic inter : 'a set, 'a set -> 'a set

axiom inter_def1153 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, inter(s1, s2)) ->
  mem(x, s1)))

axiom inter_def1154 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, inter(s1, s2)) ->
  mem(x, s2)))

axiom inter_def1155 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) and mem(x,
  s2)) -> mem(x, inter(s1, s2))))

logic diff : 'a set, 'a set -> 'a set

axiom diff_def1153 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, diff(s1, s2)) ->
  mem(x, s1)))

axiom diff_def1154 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. (mem(x, diff(s1, s2)) ->
  (not mem(x, s2))))

axiom diff_def1155 :
  (forall s1:'a set. forall s2:'a set. forall x:'a. ((mem(x, s1) and
  (not mem(x, s2))) -> mem(x, diff(s1, s2))))

axiom subset_diff :
  (forall s1:'a set. forall s2:'a set. subset(diff(s1, s2), s1))

logic choose : 'a set -> 'a

axiom choose_def :
  (forall s:'a set. ((not is_empty(s)) -> mem(choose(s), s)))

logic all : 'a set

axiom all_def : (forall x:'a. mem(x, (all : 'a set)))

logic b_bool : bool set

axiom mem_b_bool : (forall x:bool. mem(x, b_bool))

logic integer : int set

axiom mem_integer : (forall x:int. mem(x, integer))

logic natural : int set

axiom mem_natural201 : (forall x:int. (mem(x, natural) -> (0 <= x)))

axiom mem_natural202 : (forall x:int. ((0 <= x) -> mem(x, natural)))

logic natural1 : int set

axiom mem_natural1103 : (forall x:int. (mem(x, natural1) -> (0 <  x)))

axiom mem_natural1104 : (forall x:int. ((0 <  x) -> mem(x, natural1)))

logic nat : int set

axiom mem_nat252 : (forall x:int. (mem(x, nat) -> (0 <= x)))

axiom mem_nat253 : (forall x:int. (mem(x, nat) -> (x <= 2147483647)))

axiom mem_nat254 :
  (forall x:int. (((0 <= x) and (x <= 2147483647)) -> mem(x, nat)))

logic nat1 : int set

axiom mem_nat1154 : (forall x:int. (mem(x, nat1) -> (0 <  x)))

axiom mem_nat1155 : (forall x:int. (mem(x, nat1) -> (x <= 2147483647)))

axiom mem_nat1156 :
  (forall x:int. (((0 <  x) and (x <= 2147483647)) -> mem(x, nat1)))

logic bounded_int : int set

axiom mem_bounded_int153 :
  (forall x:int. (mem(x, bounded_int) -> ((-2147483647) <= x)))

axiom mem_bounded_int154 :
  (forall x:int. (mem(x, bounded_int) -> (x <= 2147483647)))

axiom mem_bounded_int155 :
  (forall x:int. ((((-2147483647) <= x) and (x <= 2147483647)) -> mem(x,
  bounded_int)))

logic mk : int, int -> int set

axiom mem_interval153 :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))]. (mem(x, mk(a,
  b)) -> (a <= x)))

axiom mem_interval154 :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))]. (mem(x, mk(a,
  b)) -> (x <= b)))

axiom mem_interval155 :
  (forall x:int. forall a:int. forall b:int [mem(x, mk(a, b))].
  (((a <= x) and (x <= b)) -> mem(x, mk(a, b))))

axiom interval_empty :
  (forall a:int. forall b:int. ((b <  a) -> (mk(a, b) = (empty : int set))))

axiom interval_add :
  (forall a:int. forall b:int. ((a <= b) -> (mk(a, b) = add(b, mk(a,
  (b - 1))))))

logic power : 'a set -> 'a set set

axiom mem_power102 :
  (forall x:'a set. forall y:'a set [mem(x, power(y))]. (mem(x, power(y)) ->
  subset(x, y)))

axiom mem_power103 :
  (forall x:'a set. forall y:'a set [mem(x, power(y))]. (subset(x, y) ->
  mem(x, power(y))))

logic non_empty_power : 'a set -> 'a set set

axiom mem_non_empty_power153 :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. (mem(x,
  non_empty_power(y)) -> subset(x, y)))

axiom mem_non_empty_power154 :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. (mem(x,
  non_empty_power(y)) -> (not (x = (empty : 'a set)))))

axiom mem_non_empty_power155 :
  (forall x:'a set. forall y:'a set [mem(x, non_empty_power(y))]. ((subset(x,
  y) and (not (x = (empty : 'a set)))) -> mem(x, non_empty_power(y))))

type ('a, 'a1) tuple2 = { Tuple2_proj_1 : 'a; Tuple2_proj_2 : 'a1
}

logic relation : 'a2 set, 'b set -> ('a2, 'b) tuple2 set set

axiom mem_relation153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  relation(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(x, s)))))

axiom mem_relation154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  relation(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(y, t)))))

axiom mem_relation155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   f) -> (mem(x, s) and mem(y, t)))) ->
  mem(f, relation(s, t))))

logic image : ('a, 'b) tuple2 set, 'a set -> 'b set

axiom mem_image102 :
  (forall r:('a, 'b) tuple2 set. forall dom1:'a set. forall y:'b [mem(y,
  image(r, dom1))]. (mem(y, image(r, dom1)) ->
  (exists x:'a. (mem(x, dom1) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, r)))))

axiom mem_image103 :
  (forall r:('a, 'b) tuple2 set. forall dom1:'a set. forall y:'b [mem(y,
  image(r, dom1))].
  ((exists x:'a. (mem(x, dom1) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
   }, r))) ->
  mem(y, image(r, dom1))))

axiom image_union :
  (forall r:('a, 'b) tuple2 set. forall s:'a set. forall t:'a set. (image(r,
  union(s, t)) = union(image(r, s), image(r, t))))

axiom image_add :
  (forall r:('a, 'b) tuple2 set. forall dom1:'a set. forall x:'a. (image(r,
  add(x, dom1)) = union(image(r, add(x, (empty : 'a set))), image(r, dom1))))

logic infix_plmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_function204 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(x, s)))))

axiom mem_function205 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  f) -> mem(y, t)))))

axiom mem_function206 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngt(s, t)) ->
  (forall x:'a. forall y1:'b. forall y2:'b. ((mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y1 }, f) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y2 },
  f)) -> (y1 = y2)))))

axiom mem_function207 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  (((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
    f) -> (mem(x, s) and mem(y, t)))) and
  (forall x:'a. forall y1:'b. forall y2:'b. ((mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y1 }, f) and mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y2 },
  f)) -> (y1 = y2)))) -> mem(f, infix_plmngt(s, t))))

axiom domain_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall x:'a. forall y:'b. (mem(f, infix_plmngt(s, t)) -> (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f) -> mem(x, s))))

axiom range_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall x:'a. forall y:'b. (mem(f, infix_plmngt(s, t)) -> (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f) -> mem(y, t))))

axiom function_extend_range :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall u:'b set. (subset(t, u) -> (mem(f, infix_plmngt(s, t)) -> mem(f,
  infix_plmngt(s, u)))))

axiom function_reduce_range :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall u:'b set. (subset(u, t) -> (mem(f, infix_plmngt(s, t)) ->
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   f) -> mem(y, u))) ->
  mem(f, infix_plmngt(s, u))))))

logic inverse : ('a, 'b) tuple2 set -> ('b, 'a) tuple2 set

axiom Inverse_def102 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = x },
  inverse(r)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r))))

axiom Inverse_def103 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = x }, inverse(r)))))

logic dom : ('a, 'b) tuple2 set -> 'a set

axiom dom_def102 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a. (mem(x, dom(r)) ->
  (exists y:'b. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom dom_def103 :
  (forall r:('a, 'b) tuple2 set.
  (forall x:'a.
  ((exists y:'b. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)) -> mem(x,
  dom(r)))))

logic ran : ('a, 'b) tuple2 set -> 'b set

axiom ran_def102 :
  (forall r:('a, 'b) tuple2 set.
  (forall y:'b. (mem(y, ran(r)) ->
  (exists x:'a. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)))))

axiom ran_def103 :
  (forall r:('a, 'b) tuple2 set.
  (forall y:'b.
  ((exists x:'a. mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r)) -> mem(y,
  ran(r)))))

axiom dom_empty : (dom((empty : ('a, 'b) tuple2 set)) = (empty : 'a set))

axiom dom_add :
  (forall f:('a, 'b) tuple2 set. forall x:'a. forall y:'b. (dom(add({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, f)) = add(x, dom(f))))

axiom dom_singleton :
  (forall x:'a. forall y:'b. (dom(add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, (empty : ('a, 'b) tuple2 set))) = add(x, (empty : 'a set))))

logic infix_mnmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_functions153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_total_functions154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngt(s, t)) -> (dom(f) = s)))

axiom mem_total_functions155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and (dom(f) = s)) -> mem(f, infix_mnmngt(s, t))))

axiom total_function_is_function :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set [mem(f,
  infix_mnmngt(s, t))]. (mem(f, infix_mnmngt(s, t)) -> mem(f, infix_plmngt(s,
  t))))

axiom singleton_is_partial_function :
  (forall s:'a set. forall t:'b set. forall x:'a. forall y:'b. ((mem(x,
  s) and mem(y, t)) -> mem(add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  (empty : ('a, 'b) tuple2 set)), infix_plmngt(s, t))))

axiom singleton_is_function :
  (forall x:'a. forall y:'b [add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  (empty : ('a, 'b) tuple2 set))]. mem(add({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, (empty : ('a, 'b) tuple2 set)), infix_mnmngt(add(x,
  (empty : 'a set)), add(y, (empty : 'b set)))))

logic apply : ('a, 'b) tuple2 set, 'a -> 'b

axiom apply_def0 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. ((mem(f, infix_plmngt(s, t)) and mem(a1, dom(f))) -> mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = apply(f, a1) }, f)))

axiom apply_def1 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. ((mem(f, infix_mnmngt(s, t)) and mem(a1, s)) -> mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = apply(f, a1) }, f)))

axiom apply_def2 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  forall a1:'a. forall b1:'b. ((mem(f, infix_plmngt(s, t)) and mem({
  Tuple2_proj_1 = a1; Tuple2_proj_2 = b1 }, f)) -> (apply(f, a1) = b1)))

axiom apply_singleton :
  (forall x:'a. forall y:'b. (apply(add({ Tuple2_proj_1 = x; Tuple2_proj_2 =
  y }, (empty : ('a, 'b) tuple2 set)), x) = y))

axiom apply_range :
  (forall x:'a. forall f:('a, 'b) tuple2 set. forall s:'a set.
  forall t:'b set [mem(f, infix_plmngt(s, t)), apply(f, x)]. ((mem(f,
  infix_plmngt(s, t)) and mem(x, dom(f))) -> mem(apply(f, x), t)))

logic semicolon : ('a, 'b) tuple2 set, ('b, 'c) tuple2 set -> ('a,
  'c) tuple2 set

axiom semicolon_def102 :
  (forall x:'a. forall z:'c. forall p:('a, 'b) tuple2 set. forall q:('b,
  'c) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = z }, semicolon(p,
  q)) ->
  (exists y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, p) and mem({
  Tuple2_proj_1 = y; Tuple2_proj_2 = z }, q)))))

axiom semicolon_def103 :
  (forall x:'a. forall z:'c. forall p:('a, 'b) tuple2 set. forall q:('b,
  'c) tuple2 set.
  ((exists y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, p) and mem({
   Tuple2_proj_1 = y; Tuple2_proj_2 = z }, q))) ->
  mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = z }, semicolon(p, q))))

logic direct_product : ('a, 'b) tuple2 set, ('a, 'c) tuple2 set -> ('a, ('b,
  'c) tuple2) tuple2 set

axiom direct_product_def102 :
  (forall e:('t, ('u, 'v) tuple2) tuple2. forall r1:('t, 'u) tuple2 set.
  forall r2:('t, 'v) tuple2 set [mem(e, direct_product(r1, r2))]. (mem(e,
  direct_product(r1, r2)) ->
  (exists x:'t. exists y:'u. exists z:'v. (({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = { Tuple2_proj_1 = y; Tuple2_proj_2 = z } } = e) and (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r1) and mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = z }, r2))))))

axiom direct_product_def103 :
  (forall e:('t, ('u, 'v) tuple2) tuple2. forall r1:('t, 'u) tuple2 set.
  forall r2:('t, 'v) tuple2 set [mem(e, direct_product(r1, r2))].
  ((exists x:'t. exists y:'u. exists z:'v. (({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = { Tuple2_proj_1 = y; Tuple2_proj_2 = z } } = e) and (mem({
   Tuple2_proj_1 = x; Tuple2_proj_2 = y }, r1) and mem({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = z }, r2)))) ->
  mem(e, direct_product(r1, r2))))

logic parallel_product : ('a, 'b) tuple2 set, ('c, 'd) tuple2 set -> (('a,
  'c) tuple2, ('b, 'd) tuple2) tuple2 set

axiom parallel_product_def102 :
  (forall e:(('t, 'v) tuple2, ('u, 'w) tuple2) tuple2. forall r1:('t,
  'u) tuple2 set. forall r2:('v, 'w) tuple2 set. (mem(e, parallel_product(r1,
  r2)) ->
  (exists x:'t. exists y:'v. exists z:'u. exists a:'w. (({ Tuple2_proj_1 = {
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }; Tuple2_proj_2 = { Tuple2_proj_1 =
  z; Tuple2_proj_2 = a } } = e) and (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 =
  z }, r1) and mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = a }, r2))))))

axiom parallel_product_def103 :
  (forall e:(('t, 'v) tuple2, ('u, 'w) tuple2) tuple2. forall r1:('t,
  'u) tuple2 set. forall r2:('v, 'w) tuple2 set.
  ((exists x:'t. exists y:'v. exists z:'u. exists a:'w. (({ Tuple2_proj_1 = {
   Tuple2_proj_1 = x; Tuple2_proj_2 = y }; Tuple2_proj_2 = { Tuple2_proj_1 =
   z; Tuple2_proj_2 = a } } = e) and (mem({ Tuple2_proj_1 = x;
   Tuple2_proj_2 = z }, r1) and mem({ Tuple2_proj_1 = y; Tuple2_proj_2 = a },
   r2)))) ->
  mem(e, parallel_product(r1, r2))))

axiom semicolon_dom :
  (forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  subset(dom(semicolon(f, g)), dom(f)))

axiom semicolon_is_function :
  (forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  forall s:'a set. forall t:'b set. forall u:'c set. ((mem(f, infix_plmngt(s,
  t)) and mem(g, infix_plmngt(t, u))) -> mem(semicolon(f, g), infix_plmngt(s,
  u))))

axiom apply_compose :
  (forall x:'a. forall f:('a, 'b) tuple2 set. forall g:('b, 'c) tuple2 set.
  forall s:'a set. forall t:'b set. forall u:'c set. ((mem(f, infix_plmngt(s,
  t)) and (mem(g, infix_plmngt(t, u)) and (mem(x, dom(f)) and mem(apply(f,
  x), dom(g))))) -> (apply(semicolon(f, g), x) = apply(g, apply(f, x)))))

logic infix_gtplgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_injection153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_partial_injection154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgt(s, t)) -> mem(inverse(f), infix_plmngt(t, s))))

axiom mem_partial_injection155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and mem(inverse(f), infix_plmngt(t, s))) -> mem(f,
  infix_gtplgt(s, t))))

logic infix_gtmngt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_injection153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_gtplgt(s, t))))

axiom mem_total_injection154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_injection155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtplgt(s, t)) and mem(f, infix_mnmngt(s, t))) -> mem(f,
  infix_gtmngt(s, t))))

axiom mem_total_injection_alt153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_injection_alt154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngt(s, t)) -> mem(inverse(f), infix_plmngt(t, s))))

axiom mem_total_injection_alt155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_mnmngt(s, t)) and mem(inverse(f), infix_plmngt(t, s))) -> mem(f,
  infix_gtmngt(s, t))))

axiom injection :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set.
  (forall x:'a. forall y:'a. (mem(f, infix_gtmngt(s, t)) -> (mem(x, s) ->
  (mem(y, s) -> ((apply(f, x) = apply(f, y)) -> (x = y)))))))

logic infix_plmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_surjection153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngtgt(s, t)) -> mem(f, infix_plmngt(s, t))))

axiom mem_partial_surjection154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_plmngtgt(s, t)) -> (ran(f) = t)))

axiom mem_partial_surjection155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngt(s, t)) and (ran(f) = t)) -> mem(f, infix_plmngtgt(s, t))))

logic infix_mnmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_surjection153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngtgt(s, t)) -> mem(f, infix_plmngtgt(s, t))))

axiom mem_total_surjection154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_mnmngtgt(s, t)) -> mem(f, infix_mnmngt(s, t))))

axiom mem_total_surjection155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_plmngtgt(s, t)) and mem(f, infix_mnmngt(s, t))) -> mem(f,
  infix_mnmngtgt(s, t))))

logic infix_gtplgtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_partial_bijection153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgtgt(s, t)) -> mem(f, infix_gtplgt(s, t))))

axiom mem_partial_bijection154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtplgtgt(s, t)) -> mem(f, infix_plmngtgt(s, t))))

axiom mem_partial_bijection155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtplgt(s, t)) and mem(f, infix_plmngtgt(s, t))) -> mem(f,
  infix_gtplgtgt(s, t))))

logic infix_gtmngtgt : 'a set, 'b set -> ('a, 'b) tuple2 set set

axiom mem_total_bijection153 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngtgt(s, t)) -> mem(f, infix_gtmngt(s, t))))

axiom mem_total_bijection154 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. (mem(f,
  infix_gtmngtgt(s, t)) -> mem(f, infix_mnmngtgt(s, t))))

axiom mem_total_bijection155 :
  (forall f:('a, 'b) tuple2 set. forall s:'a set. forall t:'b set. ((mem(f,
  infix_gtmngt(s, t)) and mem(f, infix_mnmngtgt(s, t))) -> mem(f,
  infix_gtmngtgt(s, t))))

logic id : 'a set -> ('a, 'a) tuple2 set

axiom id_def153 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, id(s)) -> mem(x, s)))

axiom id_def154 :
  (forall x:'a. forall y:'a. forall s:'a set. (mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, id(s)) -> (x = y)))

axiom id_def155 :
  (forall x:'a. forall y:'a. forall s:'a set. ((mem(x, s) and (x = y)) ->
  mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, id(s))))

axiom id_dom : (forall s:'a set. (dom(id(s)) = s))

axiom id_ran : (forall s:'a set. (ran(id(s)) = s))

axiom id_fun : (forall s:'a set. mem(id(s), infix_plmngt(s, s)))

axiom id_total_fun : (forall s:'a set. mem(id(s), infix_mnmngt(s, s)))

function seq_length(n: int, s: 'a set) : (int, 'a) tuple2 set set =
  infix_mnmngt(mk(1, n), s)

axiom length_uniq :
  (forall n1:int. forall n2:int. forall s1:'a set. forall s2:'a set.
  forall r:(int, 'a) tuple2 set. (((0 <= n1) and mem(r, seq_length(n1,
  s1))) -> (((0 <= n2) and mem(r, seq_length(n2, s2))) -> (n1 = n2))))

logic size : (int, 'a) tuple2 set -> int

axiom size_def :
  (forall n:int. forall s:'a set. forall r:(int, 'a) tuple2 set.
  (((0 <= n) and mem(r, seq_length(n, s))) -> (size(r) = n)))

logic seq : 'a set -> (int, 'a) tuple2 set set

axiom seq_def153 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) ->
  (0 <= size(r))))

axiom seq_def154 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) -> mem(r,
  seq_length(size(r), s))))

axiom seq_def155 :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (((0 <= size(r)) and
  mem(r, seq_length(size(r), s))) -> mem(r, seq(s))))

axiom seq_as_total_function :
  (forall s:'a set. forall r:(int, 'a) tuple2 set. (mem(r, seq(s)) -> mem(r,
  infix_mnmngt(mk(1, size(r)), s))))

logic seq1 : 'a set -> (int, 'a) tuple2 set set

logic iseq : 'a set -> (int, 'a) tuple2 set set

logic iseq1 : 'a set -> (int, 'a) tuple2 set set

logic perm : 'a set -> (int, 'a) tuple2 set set

logic is_finite_subset : 'a set, 'a set, int -> prop

axiom Empty : (forall s:'a set. is_finite_subset((empty : 'a set), s, 0))

axiom Add_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set. forall c:int.
  (is_finite_subset(s1, s2, c) -> (mem(x, s2) -> (mem(x, s1) ->
  is_finite_subset(add(x, s1), s2, c)))))

axiom Add_notmem :
  (forall x:'a. forall s1:'a set. forall s2:'a set. forall c:int.
  (is_finite_subset(s1, s2, c) -> (mem(x, s2) -> ((not mem(x, s1)) ->
  is_finite_subset(add(x, s1), s2, (c + 1))))))

axiom is_finite_subset_inversion :
  (forall z:'a set. forall z1:'a set. forall z2:int. (is_finite_subset(z, z1,
  z2) ->
  (((exists s:'a set. (((z = (empty : 'a set)) and (z1 = s)) and (z2 = 0))) or
  (exists x:'a. exists s1:'a set. exists s2:'a set. exists c:int.
  (is_finite_subset(s1, s2, c) and (mem(x, s2) and (mem(x, s1) and
  (((z = add(x, s1)) and (z1 = s2)) and (z2 = c))))))) or
  (exists x:'a. exists s1:'a set. exists s2:'a set. exists c:int.
  (is_finite_subset(s1, s2, c) and (mem(x, s2) and ((not mem(x, s1)) and
  (((z = add(x, s1)) and (z1 = s2)) and (z2 = (c + 1))))))))))

axiom finite_interval :
  (forall a:int. forall b:int. ((a <= b) -> is_finite_subset(mk(a, b),
  integer, ((b - a) + 1))))

axiom finite_interval_empty :
  (forall a:int. forall b:int. ((b <  a) -> is_finite_subset(mk(a, b),
  integer, 0)))

logic finite_subsets : 'a set -> 'a set set

axiom finite_subsets_def102 :
  (forall s:'a set. forall x:'a set. (mem(x, finite_subsets(s)) ->
  (exists c:int. is_finite_subset(x, s, c))))

axiom finite_subsets_def103 :
  (forall s:'a set. forall x:'a set.
  ((exists c:int. is_finite_subset(x, s, c)) -> mem(x, finite_subsets(s))))

axiom finite_Empty :
  (forall s:'a set. mem((empty : 'a set), finite_subsets(s)))

axiom finite_Add :
  (forall x:'a. forall s1:'a set. forall s2:'a set. (mem(s1,
  finite_subsets(s2)) -> (mem(x, s2) -> mem(add(x, s1),
  finite_subsets(s2)))))

axiom finite_Union :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set. (mem(s1,
  finite_subsets(s3)) -> (mem(s2, finite_subsets(s3)) -> mem(union(s1, s2),
  finite_subsets(s3)))))

axiom finite_inversion :
  (forall s1:'a set. forall s2:'a set. (mem(s1, finite_subsets(s2)) ->
  ((s1 = (empty : 'a set)) or
  (exists x:'a. exists s3:'a set. ((s1 = add(x, s3)) and mem(s3,
  finite_subsets(s2)))))))

logic non_empty_finite_subsets : 'a set -> 'a set set

axiom non_empty_finite_subsets_def102 :
  (forall s:'a set. forall x:'a set. (mem(x, non_empty_finite_subsets(s)) ->
  (exists c:int. (is_finite_subset(x, s, c) and
  (not (x = (empty : 'a set)))))))

axiom non_empty_finite_subsets_def103 :
  (forall s:'a set. forall x:'a set.
  ((exists c:int. (is_finite_subset(x, s, c) and
   (not (x = (empty : 'a set))))) ->
  mem(x, non_empty_finite_subsets(s))))

axiom card_non_neg :
  (forall s:'a set. forall x:'a set. forall c:int. (is_finite_subset(x, s,
  c) -> (0 <= c)))

axiom card_unique :
  (forall s:'a set. forall x:'a set. forall c1:int. forall c2:int.
  (is_finite_subset(x, s, c1) -> (is_finite_subset(x, s, c2) -> (c1 = c2))))

logic card : 'a set -> int

axiom card_def :
  (forall s:'a set. forall x:'a set. forall c:int. (is_finite_subset(x, s,
  c) -> (card(x) = c)))

axiom card_Empty : (card((empty : 'a set)) = 0)

axiom card_Add_not_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set [mem(s1,
  finite_subsets(s2)), card(add(x, s1))]. (mem(s1, finite_subsets(s2)) ->
  ((not mem(x, s1)) -> (card(add(x, s1)) = (card(s1) + 1)))))

axiom card_Add_mem :
  (forall x:'a. forall s1:'a set. forall s2:'a set [mem(s1,
  finite_subsets(s2)), card(add(x, s1))]. (mem(s1, finite_subsets(s2)) ->
  (mem(x, s1) -> (card(add(x, s1)) = card(s1)))))

axiom card_Union :
  (forall s1:'a set. forall s2:'a set. forall s3:'a set [mem(s1,
  finite_subsets(s3)), mem(s2, finite_subsets(s3)), card(union(s1, s2))].
  (mem(s1, finite_subsets(s3)) -> (mem(s2, finite_subsets(s3)) ->
  (is_empty(inter(s1, s2)) -> (card(union(s1,
  s2)) = (card(s1) + card(s2)))))))

logic times : 'a set, 'b set -> ('a, 'b) tuple2 set

axiom times_def153 :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b)) -> mem(x, a)))

axiom times_def154 :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. (mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b)) -> mem(y, b)))

axiom times_def155 :
  (forall a:'a1 set. forall b:'b1 set. forall x:'a1. forall y:'b1 [mem({
  Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))]. ((mem(x, a) and
  mem(y, b)) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, times(a, b))))

function relations(u: 'a set, v: 'b set) : ('a, 'b) tuple2 set set =
  power(times(u, v))

axiom break_mem_in_add102 :
  (forall c:('a, 'b) tuple2. forall s:('a, 'b) tuple2 set. forall x:'a.
  forall y:'b. (mem(c, add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, s)) ->
  ((c = { Tuple2_proj_1 = x; Tuple2_proj_2 = y }) or mem(c, s))))

axiom break_mem_in_add103 :
  (forall c:('a, 'b) tuple2. forall s:('a, 'b) tuple2 set. forall x:'a.
  forall y:'b. (((c = { Tuple2_proj_1 = x; Tuple2_proj_2 = y }) or mem(c,
  s)) -> mem(c, add({ Tuple2_proj_1 = x; Tuple2_proj_2 = y }, s))))

axiom break_power_times102 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (mem(r,
  power(times(u, v))) -> subset(r, times(u, v))))

axiom break_power_times103 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) -> mem(r, power(times(u, v)))))

axiom subset_of_times153 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem(x, u)))))

axiom subset_of_times154 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set. (subset(r,
  times(u, v)) ->
  (forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  r) -> mem(y, v)))))

axiom subset_of_times155 :
  (forall r:('a, 'b) tuple2 set. forall u:'a set. forall v:'b set.
  ((forall x:'a. forall y:'b. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
   r) -> (mem(x, u) and mem(y, v)))) ->
  subset(r, times(u, v))))

axiom apply_times :
  (forall s:'a set. forall x:'a. forall y:'b [apply(times(s, add(y,
  (empty : 'b set))), x)]. (mem(x, s) -> (apply(times(s, add(y,
  (empty : 'b set))), x) = y)))

logic infix_lspl : ('a, 'b) tuple2 set, ('a, 'b) tuple2 set -> ('a,
  'b) tuple2 set

axiom overriding_def153 :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lspl(q, r)) -> (mem(x, dom(r)) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r))))

axiom overriding_def154 :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y },
  infix_lspl(q, r)) -> ((not mem(x, dom(r))) -> mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, q))))

axiom overriding_def155 :
  (forall x:'a. forall y:'b. forall q:('a, 'b) tuple2 set. forall r:('a,
  'b) tuple2 set. (((mem(x, dom(r)) and mem({ Tuple2_proj_1 = x;
  Tuple2_proj_2 = y }, r)) or ((not mem(x, dom(r))) and mem({ Tuple2_proj_1 =
  x; Tuple2_proj_2 = y }, q))) -> mem({ Tuple2_proj_1 = x; Tuple2_proj_2 = y
  }, infix_lspl(q, r))))

axiom function_overriding :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. ((mem(f, infix_plmngt(s, t)) and mem(g,
  infix_plmngt(s, t))) -> mem(infix_lspl(f, g), infix_plmngt(s, t))))

axiom dom_overriding :
  (forall f:('a, 'b) tuple2 set. forall g:('a, 'b) tuple2 set
  [dom(infix_lspl(f, g))]. (dom(infix_lspl(f, g)) = union(dom(f), dom(g))))

axiom apply_overriding_1 :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. forall x:'a [mem(f, infix_plmngt(s, t)),
  mem(g, infix_plmngt(s, t)), apply(infix_lspl(f, g), x)]. ((mem(f,
  infix_plmngt(s, t)) and mem(g, infix_plmngt(s, t))) -> (mem(x, dom(g)) ->
  (apply(infix_lspl(f, g), x) = apply(g, x)))))

axiom apply_overriding_2 :
  (forall s:'a set. forall t:'b set. forall f:('a, 'b) tuple2 set.
  forall g:('a, 'b) tuple2 set. forall x:'a [mem(f, infix_plmngt(s, t)),
  apply(infix_lspl(f, g), x)| mem(g, infix_plmngt(s, t)), apply(infix_lspl(f,
  g), x)]. ((mem(f, infix_plmngt(s, t)) and mem(g, infix_plmngt(s, t))) ->
  ((not mem(x, dom(g))) -> (mem(x, dom(f)) -> (apply(infix_lspl(f, g),
  x) = apply(f, x))))))

type uninterpreted_type

type enum_ETAT_AUTOMATE = E_Traitement_carte | E_Traitement_code
  | E_Traitement_somme | E_Distribution_billets | E_Restitution_carte
  | E_Confiscation_carte | E_Veille

logic match_enum_ETAT_AUTOMATE : enum_ETAT_AUTOMATE, 'a, 'a, 'a, 'a, 'a, 'a,
  'a -> 'a

axiom match_enum_ETAT_AUTOMATE_E_Traitement_carte :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. (match_enum_ETAT_AUTOMATE(E_Traitement_carte,
  z, z1, z2, z3, z4, z5, z6) = z))

axiom match_enum_ETAT_AUTOMATE_E_Traitement_code :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. (match_enum_ETAT_AUTOMATE(E_Traitement_code, z,
  z1, z2, z3, z4, z5, z6) = z1))

axiom match_enum_ETAT_AUTOMATE_E_Traitement_somme :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. (match_enum_ETAT_AUTOMATE(E_Traitement_somme,
  z, z1, z2, z3, z4, z5, z6) = z2))

axiom match_enum_ETAT_AUTOMATE_E_Distribution_billets :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a.
  (match_enum_ETAT_AUTOMATE(E_Distribution_billets, z, z1, z2, z3, z4, z5,
  z6) = z3))

axiom match_enum_ETAT_AUTOMATE_E_Restitution_carte :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. (match_enum_ETAT_AUTOMATE(E_Restitution_carte,
  z, z1, z2, z3, z4, z5, z6) = z4))

axiom match_enum_ETAT_AUTOMATE_E_Confiscation_carte :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. (match_enum_ETAT_AUTOMATE(E_Confiscation_carte,
  z, z1, z2, z3, z4, z5, z6) = z5))

axiom match_enum_ETAT_AUTOMATE_E_Veille :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. (match_enum_ETAT_AUTOMATE(E_Veille, z, z1, z2,
  z3, z4, z5, z6) = z6))

logic set_enum_ETAT_AUTOMATE : enum_ETAT_AUTOMATE set

axiom set_enum_ETAT_AUTOMATE_axiom :
  (forall x:enum_ETAT_AUTOMATE. mem(x, set_enum_ETAT_AUTOMATE))

type enum_ETAT_DAB = E_Hors_service | E_En_service

logic match_enum_ETAT_DAB : enum_ETAT_DAB, 'a, 'a -> 'a

axiom match_enum_ETAT_DAB_E_Hors_service :
  (forall z:'a. forall z1:'a. (match_enum_ETAT_DAB(E_Hors_service, z,
  z1) = z))

axiom match_enum_ETAT_DAB_E_En_service :
  (forall z:'a. forall z1:'a. (match_enum_ETAT_DAB(E_En_service, z,
  z1) = z1))

logic set_enum_ETAT_DAB : enum_ETAT_DAB set

axiom set_enum_ETAT_DAB_axiom :
  (forall x:enum_ETAT_DAB. mem(x, set_enum_ETAT_DAB))

type enum_STATUT = E_Valide | E_Invalide | E_Illisible | E_Interdite
  | E_Perimee | E_Epuisee | E_Nouvel | E_Dernier | E_Hors_delai | E_Incident

logic match_enum_STATUT : enum_STATUT, 'a, 'a, 'a, 'a, 'a, 'a, 'a, 'a, 'a,
  'a -> 'a

axiom match_enum_STATUT_E_Valide :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Valide, z, z1, z2, z3, z4, z5, z6, z7, z8, z9) = z))

axiom match_enum_STATUT_E_Invalide :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Invalide, z, z1, z2, z3, z4, z5, z6, z7, z8,
  z9) = z1))

axiom match_enum_STATUT_E_Illisible :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Illisible, z, z1, z2, z3, z4, z5, z6, z7, z8,
  z9) = z2))

axiom match_enum_STATUT_E_Interdite :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Interdite, z, z1, z2, z3, z4, z5, z6, z7, z8,
  z9) = z3))

axiom match_enum_STATUT_E_Perimee :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Perimee, z, z1, z2, z3, z4, z5, z6, z7, z8, z9) = z4))

axiom match_enum_STATUT_E_Epuisee :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Epuisee, z, z1, z2, z3, z4, z5, z6, z7, z8, z9) = z5))

axiom match_enum_STATUT_E_Nouvel :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Nouvel, z, z1, z2, z3, z4, z5, z6, z7, z8, z9) = z6))

axiom match_enum_STATUT_E_Dernier :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Dernier, z, z1, z2, z3, z4, z5, z6, z7, z8, z9) = z7))

axiom match_enum_STATUT_E_Hors_delai :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Hors_delai, z, z1, z2, z3, z4, z5, z6, z7, z8,
  z9) = z8))

axiom match_enum_STATUT_E_Incident :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  forall z5:'a. forall z6:'a. forall z7:'a. forall z8:'a. forall z9:'a.
  (match_enum_STATUT(E_Incident, z, z1, z2, z3, z4, z5, z6, z7, z8,
  z9) = z9))

logic set_enum_STATUT : enum_STATUT set

axiom set_enum_STATUT_axiom : (forall x:enum_STATUT. mem(x, set_enum_STATUT))

predicate f1(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) = true

predicate f2(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Traitement_code) and (E_Hors_service = E_En_service))

predicate f6(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Traitement_code) and (E_Hors_service = E_En_service)) and
  (E_Veille = E_Traitement_carte))

predicate f8(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Restitution_carte) and (E_Hors_service = E_En_service))

predicate f11(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Restitution_carte) and (E_Hors_service = E_En_service)) and
  (E_Veille = E_Traitement_carte))

predicate f13(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Restitution_carte) and (E_Hors_service = E_En_service)) and
  (E_Veille = E_Traitement_code))

predicate f15(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Restitution_carte) and (E_Hors_service = E_En_service)) and
  (E_Veille = E_Traitement_somme))

predicate f17(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Restitution_carte) and (E_Hors_service = E_En_service)) and
  (E_Veille = E_Distribution_billets))

predicate f19(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Confiscation_carte) and (E_Hors_service = E_En_service))

predicate f22(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Confiscation_carte) and
  (E_Hors_service = E_En_service)) and (E_Veille = E_Traitement_carte))

predicate f24(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Confiscation_carte) and
  (E_Hors_service = E_En_service)) and (E_Veille = E_Traitement_code))

predicate f26(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Confiscation_carte) and
  (E_Hors_service = E_En_service)) and (E_Veille = E_Restitution_carte))

predicate f28(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((((((v_panne_dab = true) or (v_caisse_vde = true)) ->
  (v_etat_dab = E_Hors_service)) and ((v_etat_dab = E_Hors_service) ->
  ((v_panne_dab = true) or (v_caisse_vde = true)))) and
  (((v_courant = E_Traitement_code) and (v_etat_dab = E_En_service)) ->
  ((mem(v_precedent, union(add(E_Traitement_code,
  (empty : enum_ETAT_AUTOMATE set)), add(E_Traitement_carte,
  (empty : enum_ETAT_AUTOMATE set)))) and
  ((v_precedent = E_Traitement_code) -> mem(v_resultat, union(add(E_Nouvel,
  (empty : enum_STATUT set)), add(E_Dernier,
  (empty : enum_STATUT set)))))) and ((v_precedent = E_Traitement_carte) ->
  (v_resultat = E_Valide))))) and (((v_courant = E_Restitution_carte) and
  (v_etat_dab = E_En_service)) -> ((((mem(v_precedent,
  union(union(union(add(E_Traitement_carte,
  (empty : enum_ETAT_AUTOMATE set)), add(E_Traitement_code,
  (empty : enum_ETAT_AUTOMATE set))), add(E_Traitement_somme,
  (empty : enum_ETAT_AUTOMATE set))), add(E_Distribution_billets,
  (empty : enum_ETAT_AUTOMATE set)))) and
  ((v_precedent = E_Traitement_carte) -> mem(v_resultat,
  union(union(union(add(E_Perimee, (empty : enum_STATUT set)), add(E_Epuisee,
  (empty : enum_STATUT set))), add(E_Illisible, (empty : enum_STATUT set))),
  add(E_Invalide, (empty : enum_STATUT set)))))) and
  ((v_precedent = E_Traitement_code) -> mem(v_resultat,
  union(add(E_Hors_delai, (empty : enum_STATUT set)), add(E_Incident,
  (empty : enum_STATUT set)))))) and ((v_precedent = E_Traitement_somme) ->
  mem(v_resultat, union(union(add(E_Invalide, (empty : enum_STATUT set)),
  add(E_Hors_delai, (empty : enum_STATUT set))), add(E_Incident,
  (empty : enum_STATUT set)))))) and
  ((v_precedent = E_Distribution_billets) -> mem(v_resultat,
  union(union(add(E_Valide, (empty : enum_STATUT set)), add(E_Hors_delai,
  (empty : enum_STATUT set))), add(E_Incident,
  (empty : enum_STATUT set)))))))) and
  (((v_courant = E_Confiscation_carte) and (v_etat_dab = E_En_service)) ->
  (((mem(v_precedent, union(union(add(E_Traitement_carte,
  (empty : enum_ETAT_AUTOMATE set)), add(E_Traitement_code,
  (empty : enum_ETAT_AUTOMATE set))), add(E_Restitution_carte,
  (empty : enum_ETAT_AUTOMATE set)))) and
  ((v_precedent = E_Traitement_carte) -> (v_resultat = E_Interdite))) and
  ((v_precedent = E_Traitement_code) -> (v_resultat = E_Invalide))) and
  ((v_precedent = E_Restitution_carte) -> mem(v_resultat,
  union(add(E_Incident, (empty : enum_STATUT set)), add(E_Hors_delai,
  (empty : enum_STATUT set))))))))

predicate f29(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (E_En_service = E_Hors_service)

predicate f32(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (E_Veille = E_Traitement_code)

predicate f35(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Traitement_code) and (E_Veille = E_Traitement_carte))

predicate f37(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (E_Veille = E_Restitution_carte)

predicate f39(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Restitution_carte) and (E_Veille = E_Traitement_carte))

predicate f41(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Restitution_carte) and (E_Veille = E_Traitement_code))

predicate f43(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Restitution_carte) and (E_Veille = E_Traitement_somme))

predicate f45(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Restitution_carte) and (E_Veille = E_Distribution_billets))

predicate f47(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (E_Veille = E_Confiscation_carte)

predicate f49(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Confiscation_carte) and (E_Veille = E_Traitement_carte))

predicate f51(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Confiscation_carte) and (E_Veille = E_Traitement_code))

predicate f53(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Confiscation_carte) and (E_Veille = E_Restitution_carte))

predicate f55(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) = ((v_tst_dab = true) or
  (v_cse_vde = true))

predicate f56(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((v_courant = E_Traitement_code) and (E_Hors_service = E_En_service))

predicate f58(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Traitement_code) and (E_Hors_service = E_En_service)) and
  (v_precedent = E_Traitement_code))

predicate f60(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Traitement_code) and (E_Hors_service = E_En_service)) and
  (v_precedent = E_Traitement_carte))

predicate f62(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((v_courant = E_Restitution_carte) and (E_Hors_service = E_En_service))

predicate f64(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Restitution_carte) and
  (E_Hors_service = E_En_service)) and (v_precedent = E_Traitement_carte))

predicate f66(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Restitution_carte) and
  (E_Hors_service = E_En_service)) and (v_precedent = E_Traitement_code))

predicate f68(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Restitution_carte) and
  (E_Hors_service = E_En_service)) and (v_precedent = E_Traitement_somme))

predicate f70(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Restitution_carte) and
  (E_Hors_service = E_En_service)) and
  (v_precedent = E_Distribution_billets))

predicate f72(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((v_courant = E_Confiscation_carte) and (E_Hors_service = E_En_service))

predicate f74(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Confiscation_carte) and
  (E_Hors_service = E_En_service)) and (v_precedent = E_Traitement_carte))

predicate f76(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Confiscation_carte) and
  (E_Hors_service = E_En_service)) and (v_precedent = E_Traitement_code))

predicate f78(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((v_courant = E_Confiscation_carte) and
  (E_Hors_service = E_En_service)) and (v_precedent = E_Restitution_carte))

predicate f80(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (v_etat_dab = E_Hors_service)

predicate f81(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Traitement_code) and (v_etat_dab = E_En_service))

predicate f83(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Traitement_code) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Traitement_code))

predicate f84(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Traitement_code) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Traitement_carte))

predicate f85(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Restitution_carte) and (v_etat_dab = E_En_service))

predicate f87(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Restitution_carte) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Traitement_carte))

predicate f88(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Restitution_carte) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Traitement_code))

predicate f89(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Restitution_carte) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Traitement_somme))

predicate f90(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Restitution_carte) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Distribution_billets))

predicate f91(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((E_Veille = E_Confiscation_carte) and (v_etat_dab = E_En_service))

predicate f93(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Confiscation_carte) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Traitement_carte))

predicate f94(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Confiscation_carte) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Traitement_code))

predicate f95(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((E_Veille = E_Confiscation_carte) and (v_etat_dab = E_En_service)) and
  (v_courant = E_Restitution_carte))

predicate f96(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((v_etat_dab = E_En_service) and (v_panne_dab = false)) and
  (v_caisse_vde = false)) and ((v_courant = E_Traitement_carte) ->
  mem(v_rslt, union(union(union(union(union(union(add(E_Valide,
  (empty : enum_STATUT set)), add(E_Invalide, (empty : enum_STATUT set))),
  add(E_Illisible, (empty : enum_STATUT set))), add(E_Perimee,
  (empty : enum_STATUT set))), add(E_Interdite, (empty : enum_STATUT set))),
  add(E_Incident, (empty : enum_STATUT set))), add(E_Epuisee,
  (empty : enum_STATUT set)))))) and ((v_courant = E_Traitement_code) ->
  mem(v_rslt, union(union(union(union(union(add(E_Valide,
  (empty : enum_STATUT set)), add(E_Invalide, (empty : enum_STATUT set))),
  add(E_Nouvel, (empty : enum_STATUT set))), add(E_Dernier,
  (empty : enum_STATUT set))), add(E_Hors_delai, (empty : enum_STATUT set))),
  add(E_Incident, (empty : enum_STATUT set)))))) and
  ((v_courant = E_Traitement_somme) -> mem(v_rslt,
  union(union(union(add(E_Valide, (empty : enum_STATUT set)), add(E_Invalide,
  (empty : enum_STATUT set))), add(E_Hors_delai, (empty : enum_STATUT set))),
  add(E_Incident, (empty : enum_STATUT set)))))) and (mem(v_courant,
  union(union(add(E_Distribution_billets, (empty : enum_ETAT_AUTOMATE set)),
  add(E_Restitution_carte, (empty : enum_ETAT_AUTOMATE set))), add(E_Veille,
  (empty : enum_ETAT_AUTOMATE set)))) -> mem(v_rslt,
  union(union(add(E_Valide, (empty : enum_STATUT set)), add(E_Hors_delai,
  (empty : enum_STATUT set))), add(E_Incident,
  (empty : enum_STATUT set)))))) and ((v_courant = E_Confiscation_carte) ->
  mem(v_rslt, union(add(E_Valide, (empty : enum_STATUT set)), add(E_Invalide,
  (empty : enum_STATUT set))))))

predicate f97(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Traitement_code))

predicate f98(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Traitement_code)) and (v_courant = E_Traitement_code))

predicate f100(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Traitement_code)) and (v_courant = E_Traitement_carte))

predicate f102(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Restitution_carte))

predicate f103(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Restitution_carte)) and (v_courant = E_Traitement_carte))

predicate f105(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Restitution_carte)) and (v_courant = E_Traitement_code))

predicate f107(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Restitution_carte)) and (v_courant = E_Traitement_somme))

predicate f109(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Restitution_carte)) and (v_courant = E_Distribution_billets))

predicate f111(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  (((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Confiscation_carte))

predicate f112(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Confiscation_carte)) and (v_courant = E_Traitement_carte))

predicate f114(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Confiscation_carte)) and (v_courant = E_Traitement_code))

predicate f116(v_tst_dab: bool, v_rslt: enum_STATUT, v_resultat: enum_STATUT,
  v_precedent: enum_ETAT_AUTOMATE, v_panne_dab: bool,
  v_etat_dab: enum_ETAT_DAB, v_etat: enum_ETAT_AUTOMATE, v_cse_vde: bool,
  v_courant: enum_ETAT_AUTOMATE, v_caisse_vde: bool) =
  ((((((((((v_courant = E_Veille) -> ((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_carte)) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Veille))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Veille)))) and ((v_courant = E_Traitement_carte) ->
  ((((((((v_rslt = E_Valide) -> (v_etat = E_Traitement_code)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Illisible) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Interdite) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Perimee) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Veille))) and
  ((v_rslt = E_Epuisee) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Traitement_code) -> (((((((v_rslt = E_Valide) ->
  (v_etat = E_Traitement_somme)) and ((v_rslt = E_Invalide) ->
  (v_etat = E_Confiscation_carte))) and ((v_rslt = E_Nouvel) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Dernier) ->
  (v_etat = E_Traitement_code))) and ((v_rslt = E_Hors_delai) ->
  (v_etat = E_Restitution_carte))) and ((v_rslt = E_Incident) ->
  (v_etat = E_Restitution_carte))))) and ((v_courant = E_Traitement_somme) ->
  (((((v_rslt = E_Valide) -> (v_etat = E_Distribution_billets)) and
  ((v_rslt = E_Invalide) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Restitution_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Restitution_carte))))) and
  ((v_courant = E_Distribution_billets) ->
  (v_etat = E_Restitution_carte))) and ((v_courant = E_Restitution_carte) ->
  ((((v_rslt = E_Valide) -> (v_etat = E_Veille)) and
  ((v_rslt = E_Hors_delai) -> (v_etat = E_Confiscation_carte))) and
  ((v_rslt = E_Incident) -> (v_etat = E_Confiscation_carte))))) and
  ((v_courant = E_Confiscation_carte) -> (v_etat = E_Veille))) and
  (v_etat = E_Confiscation_carte)) and (v_courant = E_Restitution_carte))

goal determiner_nouvel_etat_3 :
  (forall v_tst_dab:bool. forall v_rslt:enum_STATUT.
  forall v_resultat:enum_STATUT. forall v_precedent:enum_ETAT_AUTOMATE.
  forall v_panne_dab:bool. forall v_etat_dab:enum_ETAT_DAB.
  forall v_etat:enum_ETAT_AUTOMATE. forall v_cse_vde:bool.
  forall v_courant:enum_ETAT_AUTOMATE. forall v_caisse_vde:bool.
  ((f1(v_tst_dab, v_rslt, v_resultat, v_precedent, v_panne_dab, v_etat_dab,
  v_etat, v_cse_vde, v_courant, v_caisse_vde) and (f28(v_tst_dab, v_rslt,
  v_resultat, v_precedent, v_panne_dab, v_etat_dab, v_etat, v_cse_vde,
  v_courant, v_caisse_vde) and (f96(v_tst_dab, v_rslt, v_resultat,
  v_precedent, v_panne_dab, v_etat_dab, v_etat, v_cse_vde, v_courant,
  v_caisse_vde) and f100(v_tst_dab, v_rslt, v_resultat, v_precedent,
  v_panne_dab, v_etat_dab, v_etat, v_cse_vde, v_courant, v_caisse_vde)))) ->
  (v_rslt = E_Valide)))
